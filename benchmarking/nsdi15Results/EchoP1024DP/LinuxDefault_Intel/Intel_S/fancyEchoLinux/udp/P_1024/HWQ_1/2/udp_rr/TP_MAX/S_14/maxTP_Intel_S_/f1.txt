./netperf-wrapper -d 2 -I 3 -l 10 -c fancyEchoLinux --udp --serverCoreShift 2 -H asiago -C ziger2 -C sbrinz2 -C gruyere -C burrata -C ziger2 -C sbrinz2 -C gruyere -C burrata -C ziger2 -C sbrinz2 -C gruyere -C burrata -C ziger2 -C sbrinz2 -C gruyere -C burrata --servercores 14 --serverInstances 1 --hwqueues 1 --clientcores 1 -T 10.113.4.95 udp_rr --packet 1024 --concurrency 8 -t fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST -o ../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_14//maxTP_Intel_S_/ -L ../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_14//maxTP_Intel_S_//fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST.log
toCoreList2 0,1,2,3,4,5,6,7,8,9,10,11,12,13
FancyEcho Parameters:  -a t0 -p 888  -a t1 -p 888  -a t2 -p 888  -a t3 -p 888  -a t4 -p 888  -a t5 -p 888  -a t6 -p 888  -a t7 -p 888  -a t8 -p 888  -a t9 -p 888  -a t10 -p 888  -a t11 -p 888  -a t12 -p 888  -a t13 -p 888  -t -q t0  -t -q t1  -t -q t2  -t -q t3  -t -q t4  -t -q t5  -t -q t6  -t -q t7  -t -q t8  -t -q t9  -t -q t10  -t -q t11  -t -q t12  -t -q t13 
Cores used by machine ziger2: [0]
Cores used by machine sbrinz2: [0]
Cores used by machine gruyere: [0]
Cores used by machine burrata: [0]
Cores used by machine ziger2: [1]
Cores used by machine sbrinz2: [1]
Cores used by machine gruyere: [1]
Cores used by machine burrata: [1]
Cores used by machine ziger2: [2]
Cores used by machine sbrinz2: [2]
Cores used by machine gruyere: [2]
Cores used by machine burrata: [2]
Cores used by machine ziger2: [3]
Cores used by machine sbrinz2: [3]
Cores used by machine gruyere: [3]
Cores used by machine burrata: [3]
Cores used by machine asiago: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
port_list_for_clients dst: [888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888]
port_list_for_clients src: [9000, 9000, 9000, 9000, 9001, 9001, 9001, 9001, 9002, 9002, 9002, 9002, 9003, 9003, 9003, 9003]
Actually running the benchmark to collect data
2014-07-09:00:56:28: Starting server applications

2014-07-09:00:56:32: Starting client applications

2014-07-09:00:56:32: Benchmark running, for threads which are marked for waiting

2014-07-09:00:56:47: Benchmark done (runtime = 15.350780 secs), killing other threads

2014-07-09:00:56:47: Waiting for kill cleanup

2014-07-09:00:56:47: Processing results

2014-07-09:00:56:47: cleaning up server applications

2014-07-09:00:56:48: Done with collecting data

2014-07-09:00:56:58: Starting server applications

2014-07-09:00:57:02: Starting client applications

2014-07-09:00:57:02: Benchmark running, for threads which are marked for waiting

2014-07-09:00:57:18: Benchmark done (runtime = 15.361563 secs), killing other threads

2014-07-09:00:57:18: Waiting for kill cleanup

2014-07-09:00:57:18: Processing results

2014-07-09:00:57:18: cleaning up server applications

2014-07-09:00:57:18: Done with collecting data

2014-07-09:00:57:29: Starting server applications

2014-07-09:00:57:33: Starting client applications

2014-07-09:00:57:33: Benchmark running, for threads which are marked for waiting

2014-07-09:00:57:48: Benchmark done (runtime = 15.311118 secs), killing other threads

2014-07-09:00:57:48: Waiting for kill cleanup

2014-07-09:00:57:48: Processing results

2014-07-09:00:57:48: cleaning up server applications

2014-07-09:00:57:49: Done with collecting data

generating filename with title fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
using ../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_14//maxTP_Intel_S_/udp_rr-2014-07-09T005617.225464.fancyEchoLinux_Intel_S_udp_2_Q_1_P_1024__SRVI_1_SRV_14_C_8_BEST.json.gz as dump file
Test data is in [../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_14//maxTP_Intel_S_/udp_rr-2014-07-09T005617.225464.fancyEchoLinux_Intel_S_udp_2_Q_1_P_1024__SRVI_1_SRV_14_C_8_BEST.json.gz] (use with -i to format).

Data available for processing, analyzing it
Server: fancyEchoLinux: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
HWQUEUES: 1: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
SERVERS_INSTANCES: 1: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
SERVER_CORES: 14: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
CLIENTS: 16: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
TCONCURRENCY: 128: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
CONCURRENCY: 8: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
total TPS: [535174.0480000001, 536190.98, 533733.852]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
Net_rate: [4.4, 4.380000000000001, 4.380000000000001]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
avg TPS: [33448.378000000004, 33511.93625, 33358.36575]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
get_min: [68.6875, 67.125, 69.9375]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
MIN_LATENCY: [68.6875, 67.125, 69.9375]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
RT_LATENCY: [331.63243750000004, 304.70293749999996, 340.79581250000007]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
P50_LATENCY: [317.9375, 297.75, 332.1875]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
P90_LATENCY: [544.125, 489.875, 547.6875]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
P99_LATENCY: [833.25, 675.0, 779.125]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
MAX_LATENCY: [3367.9375, 3119.5625, 3273.375]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
USE_TCP: False: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
TITLE: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST
[('fancyEchoLinux', 1, 1, 14, 16, 0)]
|    Server  |  HWQUEUES  | SERVERS_I  | SERVER_CO  |   CLIENTS  | TCONCURRE  | CONCURREN  | total TPS  |  Net_rate  |   avg TPS  |   get_min  | MIN_LATEN  | RT_LATENC  | P50_LATEN  | P90_LATEN  | P99_LATEN  | MAX_LATEN  |   USE_TCP  |     TITLE  |
| fancyEcho  |         1  |         1  |        14  |        16  |       128  |         8  | [535174.0  | [4.4, 4.3  | [33448.37  | [68.6875,  | [68.6875,  | [331.6324  | [317.9375  | [544.125,  | [833.25,   | [3367.937  |     False  |fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_14,C_8,BEST  |
