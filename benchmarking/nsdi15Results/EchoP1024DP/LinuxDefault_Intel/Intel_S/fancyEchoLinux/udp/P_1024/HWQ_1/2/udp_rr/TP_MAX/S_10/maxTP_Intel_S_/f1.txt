./netperf-wrapper -d 2 -I 3 -l 10 -c fancyEchoLinux --udp --serverCoreShift 2 -H asiago -C ziger2 -C sbrinz2 -C gruyere -C burrata -C ziger2 -C sbrinz2 -C gruyere -C burrata -C ziger2 -C sbrinz2 -C gruyere -C burrata -C ziger2 -C sbrinz2 -C gruyere -C burrata --servercores 10 --serverInstances 1 --hwqueues 1 --clientcores 1 -T 10.113.4.95 udp_rr --packet 1024 --concurrency 8 -t fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST -o ../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_10//maxTP_Intel_S_/ -L ../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_10//maxTP_Intel_S_//fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST.log
toCoreList2 0,1,2,3,4,5,6,7,8,9
FancyEcho Parameters:  -a t0 -p 888  -a t1 -p 888  -a t2 -p 888  -a t3 -p 888  -a t4 -p 888  -a t5 -p 888  -a t6 -p 888  -a t7 -p 888  -a t8 -p 888  -a t9 -p 888  -t -q t0  -t -q t1  -t -q t2  -t -q t3  -t -q t4  -t -q t5  -t -q t6  -t -q t7  -t -q t8  -t -q t9 
Cores used by machine ziger2: [0]
Cores used by machine sbrinz2: [0]
Cores used by machine gruyere: [0]
Cores used by machine burrata: [0]
Cores used by machine ziger2: [1]
Cores used by machine sbrinz2: [1]
Cores used by machine gruyere: [1]
Cores used by machine burrata: [1]
Cores used by machine ziger2: [2]
Cores used by machine sbrinz2: [2]
Cores used by machine gruyere: [2]
Cores used by machine burrata: [2]
Cores used by machine ziger2: [3]
Cores used by machine sbrinz2: [3]
Cores used by machine gruyere: [3]
Cores used by machine burrata: [3]
Cores used by machine asiago: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
port_list_for_clients dst: [888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888]
port_list_for_clients src: [9000, 9000, 9000, 9000, 9001, 9001, 9001, 9001, 9002, 9002, 9002, 9002, 9003, 9003, 9003, 9003]
Actually running the benchmark to collect data
2014-07-09:00:46:09: Starting server applications

2014-07-09:00:46:13: Starting client applications

2014-07-09:00:46:13: Benchmark running, for threads which are marked for waiting

2014-07-09:00:46:29: Benchmark done (runtime = 15.304785 secs), killing other threads

2014-07-09:00:46:29: Waiting for kill cleanup

2014-07-09:00:46:29: Processing results

2014-07-09:00:46:29: cleaning up server applications

2014-07-09:00:46:29: Done with collecting data

2014-07-09:00:46:40: Starting server applications

2014-07-09:00:46:44: Starting client applications

2014-07-09:00:46:44: Benchmark running, for threads which are marked for waiting

2014-07-09:00:46:59: Benchmark done (runtime = 15.447948 secs), killing other threads

2014-07-09:00:46:59: Waiting for kill cleanup

2014-07-09:00:46:59: Processing results

2014-07-09:00:46:59: cleaning up server applications

2014-07-09:00:47:00: Done with collecting data

2014-07-09:00:47:11: Starting server applications

2014-07-09:00:47:15: Starting client applications

2014-07-09:00:47:15: Benchmark running, for threads which are marked for waiting

2014-07-09:00:47:30: Benchmark done (runtime = 15.324786 secs), killing other threads

2014-07-09:00:47:30: Waiting for kill cleanup

2014-07-09:00:47:30: Processing results

2014-07-09:00:47:30: cleaning up server applications

2014-07-09:00:47:31: Done with collecting data

generating filename with title fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
using ../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_10//maxTP_Intel_S_/udp_rr-2014-07-09T004558.554058.fancyEchoLinux_Intel_S_udp_2_Q_1_P_1024__SRVI_1_SRV_10_C_8_BEST.json.gz as dump file
Test data is in [../netperfScaleResults/Linux/r1//Intel_S//fancyEchoLinux/udp/P_1024/HWQ_1/2/udp_rr//TP_MAX/S_10//maxTP_Intel_S_/udp_rr-2014-07-09T004558.554058.fancyEchoLinux_Intel_S_udp_2_Q_1_P_1024__SRVI_1_SRV_10_C_8_BEST.json.gz] (use with -i to format).

Data available for processing, analyzing it
Server: fancyEchoLinux: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
HWQUEUES: 1: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
SERVERS_INSTANCES: 1: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
SERVER_CORES: 10: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
CLIENTS: 16: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
TCONCURRENCY: 128: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
CONCURRENCY: 8: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
total TPS: [582418.9430000001, 570354.269, 576398.476]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
Net_rate: [4.74, 4.67, 4.720000000000001]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
avg TPS: [36401.183937500005, 35647.1418125, 36024.90475]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
get_min: [66.4375, 61.625, 63.125]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
MIN_LATENCY: [66.4375, 61.625, 63.125]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
RT_LATENCY: [329.106875, 320.60450000000003, 327.99212499999993]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
P50_LATENCY: [332.75, 336.0, 342.0]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
P90_LATENCY: [548.0625, 519.875, 541.8125]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
P99_LATENCY: [814.125, 749.875, 788.375]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
MAX_LATENCY: [1746.0, 1503.9375, 1744.0625]: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
USE_TCP: False: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
TITLE: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST: fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST
[('fancyEchoLinux', 1, 1, 10, 16, 0)]
|    Server  |  HWQUEUES  | SERVERS_I  | SERVER_CO  |   CLIENTS  | TCONCURRE  | CONCURREN  | total TPS  |  Net_rate  |   avg TPS  |   get_min  | MIN_LATEN  | RT_LATENC  | P50_LATEN  | P90_LATEN  | P99_LATEN  | MAX_LATEN  |   USE_TCP  |     TITLE  |
| fancyEcho  |         1  |         1  |        10  |        16  |       128  |         8  | [582418.9  | [4.74, 4.  | [36401.18  | [66.4375,  | [66.4375,  | [329.1068  | [332.75,   | [548.0625  | [814.125,  | [1746.0,   |     False  |fancyEchoLinux,Intel_S,udp,2,Q_1,P_1024,,SRVI_1,SRV_10,C_8,BEST  |
