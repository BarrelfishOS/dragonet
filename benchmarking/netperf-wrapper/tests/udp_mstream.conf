## -*- mode: python; coding: utf-8 -*-

import datetime

def timeStamped(fname, fmt='%Y%m%d%H%M%S_{fname}'):
    return datetime.datetime.now().strftime(fmt).format(fname=fname)



include('netperf_definitions.inc')
AGGREGATOR='summary'
#AGGREGATOR='timeseries'
DESCRIPTION='UDP stream'
#DEFAULTS={'PLOT': 'totals'}
TESTNAME='UDP_STREAM'
ITERATIONS=3

RESULT_LOCATION_BASE = '${HOME}/tempResult%s' % (timeStamped(TESTNAME.strip().replace(' ', '')))
# NOTE: The RESULT_LOCATION_BASE  should have absolute path
# NOTE: This location will be created if not present

def dstatCmd(mname, outBase=RESULT_LOCATION_BASE, outfname='dstat_out.dstat',
            outjson='dstat_out.json',
            netdev='lo', cpus='3,5', runtime=TOTAL_LENGTH):
    if outfname == None or outfname == "" or outfname == False :
        outfname = '/dev/null'
    else :
        outfilename = ('%s_%s/%s' % (RESULT_LOCATION_BASE, mname, outfname))

    outjsonname = ('%s_%s/%s' % (RESULT_LOCATION_BASE, mname, outjson))
    cmd = '../dstat/dstat --nocolor -J %s -cny -C%s -N %s 1 %d > %s ; cat %s' % (
                   outjsonname, cpus, netdev, runtime, outfilename, outjsonname)
    return cmd


TOOLS_LOCATION1 = '${HOME}/dragonet/benchmarking/netperf-wrapper/'
TOOLS_LOCATION2 = '${HOME}/git/dragonet/benchmarking/netperf-wrapper/'

DATA_SETS = o([

    ('server-1',
         {
          'deployment_host': 'appenzeller',
          'result_location': '%s_server1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'TOOLS': o([
#            ( 'load_sink1',
#            {
#                'command': '%s ' % (
#                    NETSERVER_CMD ),
#                'runner': 'process',
#                #'runner': 'netperf_demo',
#                'units': 'Gbits/s',
#            }),

            ('dstat_moniter_S1',
            {
                'command': dstatCmd (mname = 'server1'),
                'runner': 'dstat_json',
            }),
            ]),

          }),


    ('client-1',
         {
          'deployment_host': 'appenzeller',
          'result_location': '%s_client1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'TOOLS': o([
            ( 'netperf',
            {
                'command': '%s -P 0 -H %s -t %s -l %d -- -k all' % (
                    NETPERF_CMD, HOST, TESTNAME, TOTAL_LENGTH),
                'runner': 'netperf_sumary',
                'units': 'Gbits/s',
            }),

            ('dstat',
            {
                'command': dstatCmd (mname = 'client1'),
                'runner': 'dstat_json',
            }),
            ]),

          }),

    ('client-2',
         {
          'deployment_host': 'ziger1',
          'result_location': '%s_%s' % (RESULT_LOCATION_BASE, 'client2'),
          'tools_location': TOOLS_LOCATION1,
          'TOOLS': o([
            ( 'netperf',
            {
                'command': '%s -P 0 -H %s -t %s -l %d -- -k all' % (
                    NETPERF_CMD, HOST, TESTNAME, TOTAL_LENGTH),
                'runner': 'netperf_sumary',
                'units': 'Gbits/s',
            }),

            ('dstat',
            {
                'command': dstatCmd (mname = 'client2'),
                'runner': 'dstat_json',
            }),
            ]),

          }),

        ])


def get_server_bw(allResults):
    """should return value series to plot from whole result"""
    res = allResults['1']['server-1']['dstat_moniter_S1']['dstat_outlist']['net/lo']['recv'][2:-1]
    return map ((lambda x: (float)(int(x) * 8)/ (10 ** 9) ), res)

def get_final_bw(allResults):
    """should return value series to plot from whole result"""
    ans = []
    for rn, r in allResults.items():
        per_run = []
        for mn, m in r.items():
            for tn, t in m.items():
                if (tn == 'netperf'):
                    per_run.append(float(t['RESULT']))
        assert(len(per_run) > 0)
        ans.append(sum(per_run))
    return ans

PLOTS = o([
    ('serverbw',
     {'description': 'Bandwidth observed by server',
      'type': 'timeseries',
      'series': [{'data': get_server_bw, #get_final_bw,
                  'label': 'RX bandwidth'},
                ]
     }),
    ('finalbw',
     {'description': 'Bandwidth observed in Userspace',
      'type': 'timeseries',
      'series': [{'data': get_final_bw,
                  'label': 'RX bandwidth'},
                ]
     }),
    ('box_totals',
     {'description': 'Box plot of totals',
      'parent': 'finalbw', # 'serverbw',
      'type': 'box',}),
    ])



#########################################################


DATA_SETS_SUMMARY = o([
        ('UDP Summary',
         {
          #'command': '%s  -D -%.1f -H %s -t %s -l %d' % (
          #   NETPERF_CMD, STEP_SIZE, HOST, TESTNAME, TOTAL_LENGTH),
          #'runner': 'netperf_demo',
          'command': '%s -P 0 -H %s -t %s -l %d -- -k all' % (
            NETPERF_CMD, HOST, TESTNAME, TOTAL_LENGTH),
          'runner': 'netperf_sumary',
          'iterations': ITERATIONS,
          'units': 'Gbits/s',
          'deployment_host': 'appenzeller',
          'result_location': './tempResultLocation/',
          }),
        ])


DATA_SETS_OLD = o([
        ('UDP Summary',
         {
          'command': '%s  -D -%.1f -H %s -t %s -l %d' % (
             NETPERF_CMD, STEP_SIZE, HOST, TESTNAME, TOTAL_LENGTH),
          'runner': 'netperf_demo',
#          'AGGREGATOR': 'timeseries',
          'aggregator': 'timeseries',
          'units': 'Gbits/s',
          'deployment_host': 'appenzeller',
          'result_location': './tempResultLocation/',
          }),
        ])



