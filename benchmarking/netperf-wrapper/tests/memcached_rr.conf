## -*- mode: python; coding: utf-8 -*-

import pprint
pp = pprint.PrettyPrinter(indent=4)

AGGREGATOR="timeseries"
TOTAL_LENGTH=LENGTH + 2

AGGREGATOR='summary'
DESCRIPTION='Memcached Transactions'
DEFAULTS={'PLOT': 'lbest'}

PIN_THREADS = True
MAX_CORES = SERVERS_CORECOUNT[SERVERS[0]]


MEMASLAP_CMD ="sudo ./runBetter.sh memaslap -t%ds  -S%dm " % (
        TOTAL_LENGTH, TOTAL_LENGTH
        )

SERVER_INITIAL_PORT = 7777
CLIENT_INITIAL_PORT = 8000

USING_UDP = ' --udp '

TESTNAME='MEMCACHED_RR'

RESULT_LOCATION_BASE = '%s_%s' % (RESULT_LOCATION_BASE2, TESTNAME.strip().replace(' ', ''))
# NOTE: The RESULT_LOCATION_BASE  should have absolute path
# NOTE: This location will be created if not present

assert(SPECIAL_CLIENTS_COUNT == 0)

TOOLS_LOCATION1 = '${HOME}/dragonet/benchmarking/netperf-wrapper/'
TOOLS_LOCATION2 = '${HOME}/git/dragonet/benchmarking/netperf-wrapper/'

include('simple_list_manipulations.py')

server_names=[SERVERS[0] for i in range(0, SERVERS_INSTANCES)]

client_names = expand_client_list(server_names, CLIENTS)


server_if = SERVERS_IF
client_if = CLIENTS_IF
echo_server_name = ECHO_SERVER
psize = PKT_SIZE


# List of flows which this benchmark will be dealing with
FLOWS = create_flows([TARGET], SERVER_INITIAL_PORT,
                client_names, CLIENT_INITIAL_PORT,
                CONCURRENCY)


client_core_list = gen_core_list(client_names, CLIENT_CORES, CLIENTS_CORECOUNT, starting_core=0)
server_core_list = gen_core_list(server_names, SERVER_CORES, SERVERS_CORECOUNT, starting_core=SERVER_CORESHIFT)

def cores_to_use(machine, mid, cores_to_alloc, cores_per_machine, starting_core=0):
    tcores = cores_per_machine[machine]
    starting_core = mid * cores_to_alloc
    cores_2_use = map(
                        (lambda x: x % int(tcores)),
                        range(starting_core, (starting_core + cores_to_alloc))
                     )
    return cores_2_use


include('result_parsing_helpers.py')
include('monitors_conf.py') # for tools like dstat, etc

include('dragonet_stack.py')
include('memcached_conf.py')


echo_server_cmds = SRV_CMDS(echo_server_name)

client_window_size = "1k"

dstat_ignore_initial_x_vals = 4

per_thread_concurrency_SP = 1
client_window_size_SP = client_window_size



def create_client(id, clinstance, flowList):
    # Make sure that all flows in flowList start from same client
    # FIXME: make sure that id is smaller than client_names

    clName = clinstance[0]

    clid_machine = clinstance[2] # client id within machine

    # Make sure that all flows in flowList go to same server
    target = uniqify(map( (lambda x:(x[0], x[1])), flowList ))
    assert(len(target) == 1)
    target_ip = target[0][0]
    target_port = target[0][1]

    # Make sure that all flows in flowList go to same server
    assert(len(filter((lambda x:x[2] != clName), flowList)) == 0)

    # Validations on client ports
    clports = sorted(map((lambda x:x[3]), flowList))

    # making sure that all ports are sequential
    print ("check ports in client: %d == %d - %d + 1 (%d)" % (
        len(clports), clports[-1], clports[0], (clports[-1] - clports[0] + 1))
    )

    assert(len(clports) == (clports[-1] - clports[0] + 1))

    clidstr = "%s:%d-%d" % (clName, clid_machine, id)

    cl = ('client%s' % (clidstr),
         {
          'deployment_host': clName,
          'result_location': '%s_client%s' % (RESULT_LOCATION_BASE, clidstr),
          'tools_location': TOOLS_LOCATION1,
          'is_server': False,
          'TOOLS': o([
            ( 'memaslap%s' % (clidstr),
            {
                'command' : ''
#                            'taskset -c %s ' % (toCoreList(
#                            cores_to_use(clName, clid_machine, CLIENT_CORES, CLIENTS_CORECOUNT, starting_core=0)
#                            ))
                    + ' %s %s -w %s ' % (MEMASLAP_CMD, USING_UDP, client_window_size)
                    + ' --cfg_cmd=../libmemcached-1.0.18/bmKey_64_val_%d.conf ' % (PKT_SIZE)
                    + '-s %s:%d -z %d ' % (target_ip, target_port, clports[0])
                    + '-T%d  -c %d  ' % (len(clports), len(clports))
                   ,

                'runner': 'memaslap_sumary',
                'units': 'Gbits/s',
                'wait_for': True,
                'delay': DELAY,
                'is_catastrophic': False,
                #'init_cmd': ["sleep 1"],
                'init_cmd': [],
                'out_cmd': [],
                'kill_cmd': ["sudo killall memaslap || true"],
            }),

#            ('dstat',
#            {
#                'command': dstatCmd (mname = 'client%d' % (id),
#                    cpus=toCoreList(client_core_list[id]), netdev=client_if[client_names[id]]),
#                'runner': 'dstat_json',
#                'wait_for': True,
#                'delay': DELAY,
#                'is_catastrophic': True,
#                'init_cmd': [],
#                'out_cmd': [],
#                'kill_cmd': [],
#            }),
#

            ]),
          })
    return cl

def create_client_list(client_names, startid=SPECIAL_CLIENTS_COUNT):
    clist = []
    if startid >= len(client_names):
        return clist

    # group flows per client and client-id, so that we can give each client
    # the flows it is responsible for
    flowsGroup = flows_group_by(FLOWS, (lambda x:(x[2], x[4], x[5])))
    client_instances = uniqify(map((lambda x:(x[2], x[4], x[5])), FLOWS))

    print ("client instances: ")
    pp.pprint(client_instances)
    assert(len(client_instances) == len(client_names))

    for i in range(startid, len(client_instances)):
        cl_instance = client_instances[i]
        clist.append(create_client(i, cl_instance, flowsGroup[cl_instance]))
    return clist


def create_client_attr(id, mname, attr, label, func):
    if label == None or label == "" :
        label = attr
    label = ("%s_%d_%s" % (label, id, mname))
    return result_attr_wrapper(attr, c="memaslap%d" % (id), l=label, func=func)


def create_client_attr_list(client_names,  attr, label=None, func=None,
        startid=SPECIAL_CLIENTS_COUNT):
    clist = []
    if startid >= len(client_names):
        return clist
    for i in range(startid, len(client_names)):
       clist.append(create_client_attr(i, client_names[i], attr, label, func))
    return clist


DATA_SETS = o(
        []
        + create_server_list(server_names)
        + create_client_list(client_names)
        )


def valid_tps(vals) :
    if vals == None or vals == []:
        return 0
    if min(vals) == 0 :
        return 0
    else:
        return sum(vals)

def add_bw(vals) :
    bw = []
    if vals == None or vals == []:
        return 0
    for v in vals:
        if v[-3] == 'M':
            bw.append(float(v[:-3]))
    return sum(bw)


ATTRIBUTES = o([
    ( 'attrs',
        { 'attrlist' : [
                    meta_attr_wrapper('HWQUEUES'),
                    result_attr_wrapper("cpu", c="server", l="S CPU", func=get_dstat_attr_cpu, agg=myavg),
                    meta_attr_wrapper('CORES', multiAgg=(lambda x: x['SERVERS_INSTANCES'] * x['SERVER_CORES'])),
                    meta_attr_wrapper('CLIENTS', agg=(lambda x: len(x) - SPECIAL_CLIENTS_COUNT)),
                    meta_attr_wrapper('TCONCURRENCY', l="Flows"),
                    meta_attr_wrapper('SERVER_CORES'),
                    meta_attr_wrapper('PKT_SIZE'),
                    meta_attr_wrapper('TARGET', agg=(lambda x: target_lookup(x))),
                    meta_attr_wrapper('ECHO_SERVER', l="Server"),
#                    meta_attr_wrapper('SERVERS', agg=len),
                    #result_attr_wrapper("cpu", c="client", l="C CPU", func=get_dstat_attr_cpu, agg=myavg),
                    result_attr_wrapper('RESULT', c="memaslap", l="total TPS", agg=sum),
                    result_attr_wrapper('RESULT', c="memaslap", l="AVG TPS", agg=myavg),
                    result_attr_wrapper('TPS', c="memaslap", l="MIN TPS", agg=min),
                    result_attr_wrapper('RESULT', c="memaslap", l="vtotal TPS", agg=valid_tps),
                    result_attr_wrapper('Net_rate', c="memaslap", l="Net_rate", func=get_result_str, agg=add_bw),

#                   {
#                    'data': get_server_bw,
#                    'args' : { 'takeAvg': True,
#                                'rx_tx': 'send'
#                                },
#                    'label': 'S TX bw'
#                   },
#
#                   {
#                    'data' : get_dstat_attr_cpu_detailed,
#                    'args' : {  'client':  "server",
#                                'attribute':  "cpu",
#                                'attr2': "usr",
#                                'aggregator':  myavg,
#                                },
#                    'label': 'SC usr'
#                   },
#                   {
#                    'data' : get_dstat_attr_cpu_detailed,
#                    'args' : {  'client':  "server",
#                                'attribute':  "cpu",
#                                'attr2': "sys",
#                                'aggregator':  myavg,
#                                },
#                    'label': 'SC sys'
#                   },
#                   {
#                    'data' : get_dstat_attr_cpu_detailed,
#                    'args' : {  'client':  "server",
#                                'attribute':  "cpu",
#                                'attr2': "idl",
#                                'aggregator':  myavg,
#                                },
#                    'label': 'SC idle'
#                   },
#                   {
#                    'data' : get_dstat_attr_cpu_detailed,
#                    'args' : {  'client':  "server",
#                                'attribute':  "cpu",
#                                'attr2': "wai",
#                                'aggregator':  myavg,
#                                },
#                    'label': 'SC wai'
#                   },
#                   {
#                    'data' : get_dstat_attr_cpu_detailed,
#                    'args' : {  'client':  "server",
#                                'attribute':  "cpu",
#                                'attr2': "sys",
#                                'aggregator':  myavg,
#                                },
#                    'label': 'SC stl'
#                   },
#

                    result_attr_wrapper('RESULT', c="memaslap", l="avg TPS", agg=myavg),
                    result_attr_wrapper('Get_Min', c="memaslap", l="get_min", agg=myavg),
                    result_attr_wrapper('Get_Avg', c="memaslap", l="get_avg", agg=myavg),
                    result_attr_wrapper('Get_Max', c="memaslap", l="get_max", agg=myavg),
                    result_attr_wrapper('get_misses', c="memaslap", l="get_misses total", agg=sum),
                    result_attr_wrapper('udp_timeout', c="memaslap", l="udp_timeout total", agg=sum),
                    result_attr_wrapper('packet_drop', c="memaslap", l="packet_drop total", agg=sum),
                    ]
#                    + create_client_attr_list(client_names, attr= 'cmd_get')
#                    + create_client_attr_list(client_names, attr= 'Get_Min')
#                    + create_client_attr_list(client_names, attr= 'Get_Avg')
#                    + create_client_attr_list(client_names, attr= 'Get_Max')
#                    + create_client_attr_list(client_names, attr= 'RESULT')
#
#                    + create_client_attr_list(client_names, attr= 'Net_rate',
#                            func=get_result_str, agg=find_uniq)
                    + [
                    meta_attr_wrapper('USE_TCP'),
                    #meta_attr_wrapper('SERVER_ONLOAD_CMDLINE', l="Onload"),
                    #meta_attr_wrapper('TARGET'),
                    result_attr_wrapper('threads count', c="memaslap%d"% (SPECIAL_CLIENTS_COUNT)),
                    result_attr_wrapper('concurrency', c="memaslap%d" % (SPECIAL_CLIENTS_COUNT)),
                    #result_attr_wrapper('windows size', c="memaslap%d" % (
                    #        SPECIAL_CLIENTS_COUNT), func=get_result_str, agg=find_uniq),

#                   {
#                    'data': get_interrupts,
#                    'args' : {
#                            'mname': 'server-0',
#                            'takeAvg': True},
#                    'label': 'NIC Interrupts'
#                   },

                    meta_attr_wrapper('TITLE'),
                ]
        }
    )
])


PLOTS = o([
    ('bbox',
     {
      #'description': 'Server: %s, Target: %s, TCP: %s' % (ECHO_SERVER, TARGET, USE_TCP),
      'description': 'Server: %s, Target: %s %s, TCP: %s, NUMA shift :%d' % (
            ECHO_SERVER, SERVERS_DRV[SERVERS[0]], TARGET, USE_TCP, SERVER_CORESHIFT),
      'axis_labels': ["Maximum TPS"],
      'xaxis_label': ["Srv Instances, Cores, (simulated clients)"],
      'series': [
                   #meta_attr_wrapper('ECHO_SERVER'),
                   #meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   #meta_attr_wrapper('TARGET'),
                   #netperf_attr_wrapper ('REQUEST_SIZE'),
                   #netperf_attr_wrapper ('BURST_SIZE'),
                   result_attr_wrapper('RESULT', l="total TPS"),
                   #netperf_attr_wrapper ('MIN_LATENCY'),
                ],
      'type': 'box2',}),

    ('barss',
     {
      #'description': 'Server: %s, Target: %s, TCP: %s' % (ECHO_SERVER, TARGET, USE_TCP),
      'description': 'Server: %s, Target: %s %s, TCP: %s, NUMA shift :%d' % (
            ECHO_SERVER, SERVERS_DRV[SERVERS[0]], TARGET, USE_TCP, SERVER_CORESHIFT),
      'axis_labels': ["CPU Utilization"],
      'xaxis_label': ["Srv Instances, Cores, (simulated clients)"],
      'series': [
                   #meta_attr_wrapper('ECHO_SERVER'),
                   #meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   #meta_attr_wrapper('TARGET'),
                   #netperf_attr_wrapper ('REQUEST_SIZE'),
                   #netperf_attr_wrapper ('BURST_SIZE'),
                   result_attr_wrapper('', l="SC usr"),
                   result_attr_wrapper('', l="SC sys"),
                   result_attr_wrapper('', l="SC idle"),
                   #netperf_attr_wrapper ('MIN_LATENCY'),
                ],
      'type': 'barss',}),

    ('bboxScaleAVG',
     {
      #'description': 'Server: %s, Target: %s, TCP: %s' % (ECHO_SERVER, TARGET, USE_TCP),
      'description': 'TPS, Server: %s, Target: %s %s' % (
            ECHO_SERVER, SERVERS_DRV[SERVERS[0]], TARGET),

      'axis_labels': ["AVG TPS per client"],
      'xaxis_label': ["HW queues, Srv Ports, Threads/Port, (simulated clients)"],
      'groupBy': ['SERVERS_INSTANCES'],
      'series': [
                   result_attr_wrapper('RESULT', c="memaslap", l="AVG TPS", agg=myavg, axis=1),
#                   result_attr_wrapper('THROUGHPUT', c="netperf", l="Net_rate", agg=sum, axis=2, color='red'),
                ],
      'type': 'boxscale',}),



    ('bboxScale',
     {
      #'description': 'Server: %s, Target: %s, TCP: %s' % (ECHO_SERVER, TARGET, USE_TCP),
      'description': 'TPS, Server: %s, Target: %s %s' % (
            ECHO_SERVER, SERVERS_DRV[SERVERS[0]], TARGET),

      'dual_axes': True,
      'axis_labels': ["Maximum TPS", 'Bandwidth (Gbps)'],
      'xaxis_label': ["HW queues, Srv Ports, Threads/Port, (simulated clients)"],
      'groupBy': ['SERVERS_INSTANCES'],
      'series': [
                   result_attr_wrapper('RESULT', c="memaslap", l="total TPS", agg=sum, axis=1),
#                   result_attr_wrapper('THROUGHPUT', c="netperf", l="Net_rate", agg=sum, axis=2, color='red'),
                ],
      'type': 'boxscale',}),


    ])

#########################################################




