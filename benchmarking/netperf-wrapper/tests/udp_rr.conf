## -*- mode: python; coding: utf-8 -*-

include('netperf_definitions.inc')
include('useful_funs.inc')
AGGREGATOR='summary'
#AGGREGATOR='timeseries'
DESCRIPTION='UDP Transactions'
DEFAULTS={'PLOT': 'lbest'}
TESTNAME='UDP_RR'
#ITERATIONS=3

RESULT_LOCATION_BASE = '%s_%s' % (RESULT_LOCATION_BASE2, TESTNAME.strip().replace(' ', ''))
# NOTE: The RESULT_LOCATION_BASE  should have absolute path
# NOTE: This location will be created if not present


def getInterruptLines(minfo):
    netdev = minfo["EGRESS_INFO"]["iface"]
    if netdev == None or netdev == 'lo' or netdev == "" :
        return ""
    if not 'INTERRUPTS' in  minfo["EGRESS_INFO"].keys():
        return ""
    ints = minfo["EGRESS_INFO"]['INTERRUPTS']
    if ints == None or ints == 'lo' or ints == "" :
        return ""
    return "-I %s" % (ints)

def dstatCmd(mname, outBase=RESULT_LOCATION_BASE, outfname='dstat_out.dstat',
            outjson='dstat_out.json',
            netdev='lo', cpus='3,5',
            runtime=TOTAL_LENGTH,
            interrupts=""
            ):

    if outfname == None or outfname == "" or outfname == False :
        outfname = '/dev/null'
    else :
        outfilename = ('%s_%s/%s' % (RESULT_LOCATION_BASE, mname, outfname))



    outjsonname = ('%s_%s/%s' % (RESULT_LOCATION_BASE, mname, outjson))
    cmd = '../dstat/dstat --nocolor -J %s -ciny -C%s -N %s %s 1 %d > %s ; cat %s' % (
                   outjsonname, cpus, netdev, interrupts, runtime, outfilename, outjsonname)
    return cmd


TOOLS_LOCATION1 = '${HOME}/dragonet/benchmarking/netperf-wrapper/'
TOOLS_LOCATION2 = '${HOME}/git/dragonet/benchmarking/netperf-wrapper/'

client_core = "5"
client2_core = "6"
server_core = "3"
server_names=SERVERS
client_names=CLIENTS
server_if = SERVERS_IF
client_if = CLIENTS_IF
echo_server_name = ECHO_SERVER
echo_server_cmds = SRV_CMDS[echo_server_name]
psize = PKT_SIZE
brustsize = BRUST_SIZE

server_onload = SERVER_ONLOAD_CMDLINE

if [echo_server_name] == "netserver" :
    NO_NETPERF = ""
    print "Starting netserver on server machine"
else :
    print "Assuming no netserver, pointing to default echo port 7"
    NO_NETPERF = "-N"

custom_header = "pkt=%d, brust=%d, srv=%s, onload=%s" % (psize,
            brustsize,
            echo_server_name,
            server_onload,
            )

DATA_SETS = o([

    ('server-1',
         {
          'deployment_host': server_names[0],
          'result_location': '%s_server1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'is_server': True,
          'TOOLS': o([
            ( 'echoServer',
            {
                'command': 'sudo taskset -c %s %s %s ' % (
                    server_core, server_onload, echo_server_cmds['exec_cmd']),
                'runner': 'process',
                'units': 'Gbits/s',
                'wait_for': False,
                'delay': DELAY,
                'is_catastrophic': False,
                'init_cmd': echo_server_cmds['init_cmd'],
                'kill_cmd': echo_server_cmds['kill_cmd'],
                'out_cmd': echo_server_cmds['out_cmd'],
            }),

            ('dstat',
            {
                'command': dstatCmd (mname = 'server1',
                    cpus=server_core, netdev=server_if[server_names[0]],
                    interrupts=getInterruptLines(MINFO_SERVER[server_names[0]])),
                'runner': 'dstat_json',
                'wait_for': True,
                'delay': DELAY,
                'is_catastrophic': False,
                'init_cmd': [],
                'out_cmd': [],
                'kill_cmd': [],
            }),
            ]),

          }),


    ('client-1',
         {
          'deployment_host': client_names[0],
          'result_location': '%s_client1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'is_server': False,
          'TOOLS': o([
            ( 'netperf',
            {
                'command': 'taskset -c %s %s %s -P 0 -H %s -t %s -l %d -- -r %d -b %d -k all' % (
                    client_core, NETPERF_CMD,  echo_server_cmds['client_extra_opts'],
                    TARGET, TESTNAME, TOTAL_LENGTH,
                    psize, brustsize),
                'runner': 'netperf_sumary',
                'units': 'Gbits/s',
                'wait_for': True,
                'delay': DELAY,
                'is_catastrophic': False,
                'init_cmd': ["sleep 1"],
                'out_cmd': [],
                'kill_cmd': [],
            }),

            ('dstat',
            {
                'command': dstatCmd (mname = 'client1',
                    cpus=client_core, netdev=client_if[client_names[0]]),
                'runner': 'dstat_json',
                'wait_for': True,
                'delay': DELAY,
                'is_catastrophic': False,
                'init_cmd': [],
                'out_cmd': [],
                'kill_cmd': [],
            }),
            ]),

          }),

        ])

ATTRIBUTES = o([
    ( 'attrs',
        { 'attrlist' : [
                   meta_attr_wrapper('ECHO_SERVER'),
                   meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   netperf_attr_wrapper ('REQUEST_SIZE'),
                   netperf_attr_wrapper ('RT_LATENCY'),
                   netperf_attr_wrapper ('MIN_LATENCY'),
                   netperf_attr_wrapper ('MAX_LATENCY'),
                   netperf_attr_wrapper ('P90_LATENCY'),
                   netperf_attr_wrapper ('P50_LATENCY'),
                   netperf_attr_wrapper ('P99_LATENCY'),
                   netperf_attr_wrapper ('TRANSACTION_RATE'),
                   netperf_attr_wrapper ('THROUGHPUT'),
#                   {
#                    'data': get_server_cpu,
#                    'args' : {'takeAvg': True},
#                    'label': 'Server CPU'
#                   },
#                   {
#                    'data': get_client_cpu,
#                    'args' : {'takeAvg': True},
#                    'label': 'Client CPU'
#                   },
#                   {
#                    'data': get_interrupts,
#                    'args' : {
#                            'mname': 'server-1',
#                            'takeAvg': True},
#                    'label': 'NIC Interrupts'
#                   },

                   netperf_attr_wrapper ('MIN_LATENCY'),
                   netperf_attr_wrapper ('MEAN_LATENCY'),
                   netperf_attr_wrapper ('BURST_SIZE'),
                   meta_attr_wrapper('TARGET'),
#                   {
#                    'value': MINFO_SERVER[server_names[0]]["EGRESS_INFO"]["driver"],
#                    'label': 'Driver',
#                   },
                   meta_attr_wrapper('TITLE'),
                ]
        }
    )
])


PLOTS = o([

    ('lbox',
     {'description': 'Latency (Min, AVG, P50, P90, P99) for Request/Reply workload' ,
      'axis_labels': ["us"],
      'series': [
                   #meta_attr_wrapper('ECHO_SERVER'),
                   #meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   #meta_attr_wrapper('TARGET'),
                   #netperf_attr_wrapper ('REQUEST_SIZE'),
                   #netperf_attr_wrapper ('BURST_SIZE'),
                   netperf_attr_wrapper ('P99_LATENCY'),
                   netperf_attr_wrapper ('P90_LATENCY'),
                   netperf_attr_wrapper ('P50_LATENCY'),
                   netperf_attr_wrapper ('RT_LATENCY'),
                   netperf_attr_wrapper ('MIN_LATENCY'),
                ],
      'type': 'box2',}),

    ('lboxc',
     {'description': 'Latency (Min, P50, P90, P99) for Request/Reply workload' ,
      'axis_labels': ["us"],
      'series': [
                  netperf_attr_wrapper ('RT_LATENCY'),
                ],
      'type': 'boxc',}),

    ('lstacked',
     {'description': 'Latency for Request/Reply workload' ,
      'axis_labels': ["us"],
      'series': [
                  netperf_attr_wrapper ('RT_LATENCY'),
                ],
      'type': 'stacked',}),




    ('bbox',
     {'description': 'Throughput observed for Request/Reply workload' ,
      'axis_labels': ["Gbit/s"],
      'series': [
                   #meta_attr_wrapper('ECHO_SERVER'),
                   #meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   #meta_attr_wrapper('TARGET'),
                   #netperf_attr_wrapper ('REQUEST_SIZE'),
                   #netperf_attr_wrapper ('BURST_SIZE'),
                   netperf_attr_wrapper ('THROUGHPUT'),
                   #netperf_attr_wrapper ('MIN_LATENCY'),
                ],
      'type': 'box2',}),


    ('serverbw',
     {'description': 'Bandwidth observed by server (%s)' % (custom_header),
      'type': 'timeseries',
      'axis_labels': ["Gbit/s"],
      'series': [{'data': get_server_bw,
#                  'args' : {'ifname1': server_if[server_names[0]]},
                  'label': 'RX bandwidth'},
                ]
     }),
    ('userbw',
     {'description': 'Bandwidth of responses observed by client (%s)' % (
          custom_header),
      'type': 'timeseries',
      'axis_labels': ["Gbit/s"],
      'series': [
                 {
                  'data': get_netperf_attr,
                  'args' : {'attribute': 'LOCAL_RECV_THROUGHPUT'},
                  'label': 'RX bandwidth'
                  },
                ]
     }),
    ('lbest',
     {'description': 'Bandwidth and latency of responses observed by client (%s)' % (
          custom_header),
      'type': 'timeseries',
      'axis_labels': ["Gbit/s", "Gbit/s", "usec", "/s"],
      'series': [
                   meta_attr_wrapper('ECHO_SERVER'),
                   meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   meta_attr_wrapper('TARGET'),
                   netperf_attr_wrapper ('REQUEST_SIZE'),
                   netperf_attr_wrapper ('RT_LATENCY'),
                   netperf_attr_wrapper ('MIN_LATENCY'),
                   netperf_attr_wrapper ('P90_LATENCY'),
                   netperf_attr_wrapper ('P99_LATENCY'),
                   netperf_attr_wrapper ('TRANSACTION_RATE'),
                   netperf_attr_wrapper ('THROUGHPUT'),
                   {
                    'data': get_server_cpu,
                    'args' : {'takeAvg': True},
                    'label': 'Server CPU'
                   },
                   {
                    'data': get_client_cpu,
                    'args' : {'takeAvg': True},
                    'label': 'Client CPU'
                   },

                   netperf_attr_wrapper ('MIN_LATENCY'),
                   netperf_attr_wrapper ('MEAN_LATENCY'),
                   netperf_attr_wrapper ('BURST_SIZE'),
                   meta_attr_wrapper('TITLE'),
                ]
     }),

    ('bbest',
     {'description': 'Best possible bandwidth for given pkt size (%s)' % (
          custom_header),
      'type': 'timeseries',
      'axis_labels': ["Gbit/s", "Gbit/s", "usec", "/s"],
      'series': [
                   meta_attr_wrapper('ECHO_SERVER'),
                   meta_attr_wrapper('SERVER_ONLOAD_CMDLINE'),
                   meta_attr_wrapper('TARGET'),
                   netperf_attr_wrapper ('REQUEST_SIZE'),
                   netperf_attr_wrapper ('BURST_SIZE'),
                   netperf_attr_wrapper ('THROUGHPUT'),
                   netperf_attr_wrapper ('RT_LATENCY'),
                   netperf_attr_wrapper ('TRANSACTION_RATE'),
                   netperf_attr_wrapper ('LOCAL_RECV_THROUGHPUT'),
                  {
                    'data': get_server_cpu,
                    'args' : {'takeAvg': True},
                    'label': 'Server CPU'
                   },

                   {
                    'data': get_client_cpu,
                    'args' : {'takeAvg': True},
                    'label': 'Client CPU'
                   },
                  {
                    'data': get_server_bw,
                    'args' : {'takeAvg': True},
                    'label': 'Server BW'
                   },
                   netperf_attr_wrapper ('LOCAL_SEND_THROUGHPUT'),
                   netperf_attr_wrapper ('REMOTE_RECV_THROUGHPUT'),
                   netperf_attr_wrapper ('MIN_LATENCY'),
                   netperf_attr_wrapper ('MEAN_LATENCY'),
                   meta_attr_wrapper('TITLE'),
                ]
     }),


    ('cpu',
     {'description': 'CPU utilization during benchmark (%s)' % (
        custom_header),
      'type': 'timeseries',
      'scaling': (0,100),
      'axis_labels': ["Percent Utilization", "Percent Utilization"],
      'series': [ {'data': get_server_cpu,
                    'args' : {'takeAvg': True},
                    'label': 'Server CPU'},
                  {'data': get_client_cpu,
                    'args' : {'takeAvg': True},
                    'label': 'Client CPU'}
                ]
     }),





    ('userlatency',
     {'description': 'Latency observed in Userspace (%s)' % (
          custom_header),
      'type': 'timeseries',
      'axis_labels': ["uses"],
      'series': [
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'MAX_LATENCY'},
                    'label': 'MAX LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'P99_LATENCY'},
                    'label': 'P99 LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'P90_LATENCY'},
                    'label': 'P90 LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'P50_LATENCY'},
                    'label': 'P50 LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'MEAN_LATENCY'},
                    'label': 'MEAN_LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'MIN_LATENCY'},
                    'label': 'MIN LATENCY'
                    },
                ]
     }),

    ('userlatency2',
     {'description': 'Latency observed in Userspace (%s)' % (
                        custom_header),
      'type': 'timeseries',
      'axis_labels': ["uses"],
      'series': [
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'P99_LATENCY'},
                    'label': 'P99 LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'P90_LATENCY'},
                    'label': 'P90 LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'P50_LATENCY'},
                    'label': 'P50 LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'MEAN_LATENCY'},
                    'label': 'MEAN_LATENCY'
                    },
                    {
                    'data': get_netperf_attr,
                    'args' : {'attribute': 'MIN_LATENCY'},
                    'label': 'MIN LATENCY'
                    },
                ]
     }),

    ])

#########################################################

