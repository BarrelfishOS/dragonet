## -*- mode: python; coding: utf-8 -*-

include('netperf_definitions.inc')
include('useful_funs.inc')
AGGREGATOR='summary'
#AGGREGATOR='timeseries'
DESCRIPTION='UDP stream'
#DEFAULTS={'PLOT': 'totals'}
TESTNAME='UDP_STREAM'
ITERATIONS=3

RESULT_LOCATION_BASE = '%s_%s' % (RESULT_LOCATION_BASE2, TESTNAME.strip().replace(' ', ''))
# NOTE: The RESULT_LOCATION_BASE  should have absolute path
# NOTE: This location will be created if not present

def dstatCmd(mname, outBase=RESULT_LOCATION_BASE, outfname='dstat_out.dstat',
            outjson='dstat_out.json',
            netdev='lo', cpus='3,5', runtime=TOTAL_LENGTH):
    if outfname == None or outfname == "" or outfname == False :
        outfname = '/dev/null'
    else :
        outfilename = ('%s_%s/%s' % (RESULT_LOCATION_BASE, mname, outfname))

    outjsonname = ('%s_%s/%s' % (RESULT_LOCATION_BASE, mname, outjson))
    cmd = '../dstat/dstat --nocolor -J %s -cny -C%s -N %s 1 %d > %s ; cat %s' % (
                   outjsonname, cpus, netdev, runtime, outfilename, outjsonname)
    return cmd


TOOLS_LOCATION1 = '${HOME}/dragonet/benchmarking/netperf-wrapper/'
TOOLS_LOCATION2 = '${HOME}/git/dragonet/benchmarking/netperf-wrapper/'

client_core = "5"
server_core = "3"
server_names=SERVERS
client_names=CLIENTS
server_if = SERVERS_IF
client_if = CLIENTS_IF

DATA_SETS = o([

    ('server-1',
         {
          'deployment_host': server_names[0],
          'result_location': '%s_server1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'is_server': True,
          'TOOLS': o([
#            ( 'load_sink1',
#            {
#                'command': 'taskset -c %s %s ' % (
#                    server_core, NETSERVER_CMD ),
#                'runner': 'process',
#                #'runner': 'netperf_demo',
#                'units': 'Gbits/s',
#            }),

            ('dstat',
            {
                'command': dstatCmd (mname = 'server1',
                    cpus=server_core, netdev=server_if[server_names[0]]),
                'runner': 'dstat_json',
            }),
            ]),

          }),


    ('client-1',
         {
          'deployment_host': client_names[0],
          'result_location': '%s_client1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'is_server': False,
          'TOOLS': o([
            ( 'netperf',
            {
                'command': 'taskset -c %s %s -P 0 -H %s -t %s -l %d -- -k all' % (
                    client_core, NETPERF_CMD, TARGET, TESTNAME, TOTAL_LENGTH),
                'runner': 'netperf_sumary',
                'units': 'Gbits/s',
            }),

            ('dstat',
            {
                'command': dstatCmd (mname = 'client1',
                    cpus=client_core, netdev=client_if[client_names[0]]),
                'runner': 'dstat_json',
            }),
            ]),

          }),

        ])


PLOTS = o([
    ('serverbw',
     {'description': 'Bandwidth observed by server',
      'type': 'timeseries',
      'axis_labels': ["Gbit/s"],
      'series': [{'data': get_server_bw, #get_final_bw,
#                  'args' : {'ifname': server_if[server_names[0]]},
                  'label': 'RX bandwidth'},
                ]
     }),
    ('userbw',
     {'description': 'Bandwidth observed in Userspace',
      'type': 'timeseries',
      'axis_labels': ["Gbit/s"],
      'series': [{'data': get_netperf_attr,
                  'args' : {'attribute': 'REMOTE_RECV_THROUGHPUT'},
                  'label': 'RX bandwidth'},
                ]
     }),
    ('cpu',
     {'description': 'CPU utilization during benchmark',
      'type': 'timeseries',
      'scaling': (0,100),
      'axis_labels': ["Percent Utilization", "Percent Utilization"],
      'series': [ {'data': get_server_cpu, 'label': 'Server CPU'},
                  {'data': get_client_cpu, 'label': 'Client CPU'}
                ]
     }),
    ('box_totals',
     {'description': 'Bandwidth over %d runs' % (ITERATIONS) ,
      'parent': 'finalbw',
      'type': 'box',}),
    ])

#########################################################

