## -*- mode: python; coding: utf-8 -*-

import datetime

def timeStamped(fname, fmt='%Y%m%d%H%M%S_{fname}'):
    return datetime.datetime.now().strftime(fmt).format(fname=fname)

include('netperf_definitions.inc')
AGGREGATOR='summary'
#AGGREGATOR='timeseries'
DESCRIPTION='UDP stream'
#DEFAULTS={'PLOT': 'totals'}
TESTNAME='UDP_STREAM'
ITERATIONS=1

RESULT_LOCATION_BASE = '${HOME}/tempResult%s' % (timeStamped(TESTNAME.strip().replace(' ', '')))
# NOTE: The RESULT_LOCATION_BASE  should have absolute path
# NOTE: This location will be created if not present, and also this location
#       will be deleated regularly and automatically.

TOOLS_LOCATION1 = '${HOME}/dragonet/benchmarking/netperf-wrapper/'
TOOLS_LOCATION2 = '${HOME}/git/dragonet/benchmarking/netperf-wrapper/'

DATA_SETS = o([

    ('server-1',
         {
          'deployment_host': 'appenzeller',
          'result_location': '%s_server1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'TOOLS': o([
#            ( 'load_sink1',
#            {
#                'command': '%s ' % (
#                    NETSERVER_CMD ),
#                'runner': 'process',
#                #'runner': 'netperf_demo',
#                'units': 'Gbits/s',
#            }),

            ('dstat_moniter1',
            {
                'command': '../dstat/dstat --bw -tcny -C3,5 -N lo 1 %d -J %s' % (TOTAL_LENGTH,
                   ('%s_%s/%s' % (RESULT_LOCATION_BASE, 'server1',  'dstat_out.json' ))),
                'runner': 'process',
            }),
            ]),

          }),


    ('client-1',
         {
          'deployment_host': 'appenzeller',
          'result_location': '%s_client-1' % (RESULT_LOCATION_BASE),
          'tools_location': TOOLS_LOCATION1,
          'TOOLS': o([
            ( 'load_gen1',
            {
                'command': '%s -P 0 -H %s -t %s -l %d -- -k all' % (
                    NETPERF_CMD, HOST, TESTNAME, TOTAL_LENGTH),
                'runner': 'netperf_sumary',
                'units': 'Gbits/s',
            }),

            ('dstat_moniter1',
            {
                'command': '../dstat/dstat  --bw -tcny -C3,5 -N lo1 %d -J %s' % (TOTAL_LENGTH,
                   ('%s_%s/%s' % (RESULT_LOCATION_BASE, 'client-1',  'dstat_out.json' ))),
                'runner': 'process',
            }),
            ]),

          }),

    ('client-2',
         {
          'deployment_host': 'ziger1',
          'result_location': '%s_%s' % (RESULT_LOCATION_BASE, 'client-2'),
          'tools_location': TOOLS_LOCATION1,
          'TOOLS': o([
            ( 'load_gen21',
            {
                'command': '%s -P 0 -H %s -t %s -l %d -- -k all' % (
                    NETPERF_CMD, HOST, TESTNAME, TOTAL_LENGTH),
                'runner': 'netperf_sumary',
                'units': 'Gbits/s',
            }),

            ('dstat_moniter22',
            {
                'command': '../dstat/dstat  --bw -tcny -C3,5 -N lo 1 %d  -J %s' % (TOTAL_LENGTH,
                   ('%s_%s/%s' % (RESULT_LOCATION_BASE, 'client-2',  'dstat_out.json' ))),
                'runner': 'process',
            }),
            ]),

          }),

        ])

#########################################################

DATA_SETS_SUMMARY = o([
        ('UDP Summary',
         {
          #'command': '%s  -D -%.1f -H %s -t %s -l %d' % (
          #   NETPERF_CMD, STEP_SIZE, HOST, TESTNAME, TOTAL_LENGTH),
          #'runner': 'netperf_demo',
          'command': '%s -P 0 -H %s -t %s -l %d -- -k all' % (
            NETPERF_CMD, HOST, TESTNAME, TOTAL_LENGTH),
          'runner': 'netperf_sumary',
          'iterations': ITERATIONS,
          'units': 'Gbits/s',
          'deployment_host': 'appenzeller',
          'result_location': './tempResultLocation/',
          }),
        ])


DATA_SETS_OLD = o([
        ('UDP Summary',
         {
          'command': '%s  -D -%.1f -H %s -t %s -l %d' % (
             NETPERF_CMD, STEP_SIZE, HOST, TESTNAME, TOTAL_LENGTH),
          'runner': 'netperf_demo',
#          'AGGREGATOR': 'timeseries',
          'aggregator': 'timeseries',
          'units': 'Gbits/s',
          'deployment_host': 'appenzeller',
          'result_location': './tempResultLocation/',
          }),
        ])

#PLOTS = o([
#    ('totals',
#     {'description': 'Bandwidth',
#      'type': 'timeseries',
#      'series': [{'data': 'UDP Stream', 'label': 'Download'},
#                 ]}),
#    ('box_totals',
#     {'description': 'Box plot of totals',
#      'parent': 'totals',
#      'type': 'box',}),
#    ])
#



