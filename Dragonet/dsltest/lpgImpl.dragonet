node source {
  port out[l2EtherClassified] }

node packetDrop { }

boolean l2EtherClassified {
    port true[l2EtherValidLength]
    port false[packetDrop] }

boolean l2EtherValidLength {
    port true[l2EtherValidUnicast l2EtherValidMulticast l2EtherValidBroadcast
              l2EtherValidSrc l2EtherValidType]
    port false[packetDrop] }

boolean l2EtherValidUnicast {
    port true false[l2EtherValidDest] }

boolean l2EtherValidMulticast {
    port true false[l2EtherValidDest] }

boolean l2EtherValidBroadcast {
    port true false[l2EtherValidDest] }

or l2EtherValidDest {
    port true false[l2EtherValid] }

boolean l2EtherValidSrc {
    port true false[l2EtherValid] }

and l2EtherValid {
    port true false[l3IPAndBelowValid] }

boolean l2EtherValidType {
    port true[l2EtherClassifyL3]
    port false[packetDrop] }

node l2EtherClassifyL3 {
    port ipv4[l3IPv4ValidHeaderLength]
    port ipv6[l3IPv6ValidHeaderLength]
    port arp[l3ARPValidHeaderLength]
    port drop[packetDrop] }




boolean l3ARPValidHeaderLength {
    port true[l3ARPClassify]
    port false[packetDrop] }

node l3ARPClassify {
    port request[l3ARPRequest]
    port response[l3ARPResponse]
    port drop[packetDrop] }

node l3ARPRequest {}
node l3ARPResponse {}




boolean l3IPv4ValidHeaderLength {
    port true[l3IPv4ValidReassembly l3IPv4ValidVersion l3IPv4ValidLength
              l3IPv4ValidTTL l3IPv4ValidChecksum l3IPv4Classify]
    port false[packetDrop] }

boolean l3IPv4ValidReassembly {
    port true false[l3IPv4Valid] }

boolean l3IPv4ValidVersion {
    port true false[l3IPv4Valid] }

boolean l3IPv4ValidLength {
    port true false[l3IPv4Valid] }

boolean l3IPv4ValidTTL {
    port true false[l3IPv4Valid] }

boolean l3IPv4ValidChecksum {
    port true false[l3IPv4Valid] }

node l3IPv4Classify {
    port tcp[l4TCPValidHeaderLength]
    port udp[l4UDPValidHeaderLength]
    port icmp[l3ICMPValidHeaderLength]
    port drop[packetDrop] }

and l3IPv4Valid {
    port true false[l3IPValid] }





boolean l3IPv6ValidHeaderLength {
    port true false[l3IPValid] }



or l3IPValid {
    port true false[l3IPAndBelowValid] }

and l3IPAndBelowValid {
    port true false[l3ICMPValid l4TCPValid l4UDPValid] }




boolean l3ICMPValidHeaderLength {
    port true false[l3ICMPValid] }

and l3ICMPValid {
    port true[l3ICMPOut]
    port false[packetDrop] }

node l3ICMPOut { }




boolean l4UDPValidHeaderLength {
    port true[l4UDPValidLength l4UDPValidChecksum]
    port false[packetDrop] }

boolean l4UDPValidLength {
    port true false[l4UDPValid] }

boolean l4UDPValidChecksum {
    port true false[l4UDPValid] }

and l4UDPValid {
    port true[l4UDPOut]
    port false[packetDrop] }

node l4UDPOut { }



boolean l4TCPValidHeaderLength {
    port true false[l4TCPValid] }

and l4TCPValid {
    port true[l4TCPOut]
    port false[packetDrop] }

node l4TCPOut { }



