graph lpg {
    node SoftwareRX {
        port out[RxL2EtherClassified] }

    node SoftwareTX { }

    node PacketDrop { }


    /**************************************************************************/
    /* Receive                                                                */

    cluster Rx {

        /*******************************************/
        /* Ethernet RX                             */

        cluster L2Ether {
            boolean Classified {
                port true[ValidLength]
                port false[..PacketDrop] }

            boolean ValidLength {
                port true[ValidUnicast ValidMulticast ValidBroadcast
                          ValidSrc ValidType]
                port false[..PacketDrop] }

            boolean ValidUnicast {
                port true false[ValidDest] }

            boolean ValidMulticast {
                port true false[ValidDest] }

            boolean ValidBroadcast {
                port true false[ValidDest] }

            or ValidDest {
                port true false[Valid] }

            boolean ValidSrc {
                port true false[Valid] }

            and Valid {
                port true false[.L3IPAndBelowValid] }

            boolean ValidType {
                port true[ClassifyL3]
                port false[..PacketDrop] }

            node ClassifyL3 {
                port ipv4[.L3IPv4ValidHeaderLength]
                port ipv6[.L3IPv6ValidHeaderLength]
                port arp[.L3ARPValidHeaderLength]
                port drop[..PacketDrop] }
        }


        /*******************************************/
        /* ARP RX                                  */

        cluster L3ARP {
            boolean ValidHeaderLength {
                port true[Classify]
                port false[..PacketDrop] }

            node Classify {
                port request[Request]
                port response[Response]
                port drop[..PacketDrop] }

            node Request {
                port respond[..TxARPTX] }
            node Response {}
        }


        /*******************************************/
        /* IPv4 RX                                 */

        cluster L3IPv4 {
            boolean ValidHeaderLength {
                port true[ValidReassembly ValidVersion ValidLength
                          ValidTTL ValidChecksum Classify]
                port false[..PacketDrop] }

            boolean ValidReassembly {
                port true false[Valid] }

            boolean ValidVersion {
                port true false[Valid] }

            boolean ValidLength {
                port true false[Valid] }

            boolean ValidTTL {
                port true false[Valid] }

            boolean ValidChecksum {
                port true false[Valid] }

            node Classify {
                port tcp[.L4TCPValidHeaderLength]
                port udp[.L4UDPValidHeaderLength]
                port icmp[.L3ICMPValidHeaderLength]
                port drop[..PacketDrop] }

            and Valid {
                port true false[.L3IPValid] }
        }


        /*******************************************/
        /* IPv6 RX                                 */

        boolean L3IPv6ValidHeaderLength {
            port true false[L3IPValid] }



        or L3IPValid {
            port true false[L3IPAndBelowValid] }

        and L3IPAndBelowValid {
            port true false[L3ICMPValid L4TCPValid L4UDPValid ToIPv4Local] }


        /*******************************************/
        /* ICMP RX                                 */

        cluster L3ICMP {
            boolean ValidHeaderLength {
                port true false[Valid] }

            and Valid {
                port true[Out]
                port false[..PacketDrop] }

            node Out { }
        }

        /*******************************************/
        /* UDP RX                                  */

        cluster L4UDP {
            boolean ValidHeaderLength {
                port true[ValidLength ValidChecksum]
                port false[..PacketDrop] }

            boolean ValidLength {
                port true false[Valid] }

            boolean ValidChecksum {
                port true false[Valid] }

            and Valid {
                port true[.ToUDPPortDNS]
                port false[..PacketDrop] }

            node Out { }
        }


        /*******************************************/
        /* TCP RX                                  */

        cluster L4TCP {
            boolean ValidHeaderLength {
                port true false[Valid] }

            and Valid {
                port true[Out]
                port false[..PacketDrop] }

            node Out { }
        }


        /*******************************************/
        /* Application RX                          */

        boolean ToIPv4Local {
            port true false[DnsRXFilter] }

        boolean ToUDPPortDNS {
            port true false[DnsRXFilter] }

        and DnsRXFilter {
            port true[DnsRX]
            port false[.PacketDrop] }

        node DnsRX { }

    }





    /**************************************************************************/
    /* Transmit                                                               */

    cluster Tx {
        /*******************************************/
        /* Application TX                          */

        node Source {
            port out[ExampleDnsTX ExampleDns6TX ARPTX ] }

        node ExampleDnsTX {
            port true[L4UDPTx L3IPv4Tx L2EtherTx] }

        node ExampleDns6TX {
            port true[L4UDPTx L3IPv6Tx L2EtherTx] }

        node ARPTX {
            port true[L3ARPTx L2EtherTx] }




        /*******************************************/
        /* UDP TX                                  */

        cluster L4UDP {
            or Tx {
                port true[AddHeader .L3IPv4AddHdrProtoUDP]
                port false[] }

            node AddHeader {
                port true[AddHdrDPort AddHdrSPort AddHdrChecksum
                          AddHdrLength .L4HdrAdded] }

            node AddHdrDPort {
                port true[Done] }

            node AddHdrSPort {
                port true[Done] }

            node AddHdrChecksum {
                port true[Done] }

            node AddHdrLength {
                port true[Done] }

            and Done {
                port true false[.L4Done] }
        }


        /*******************************************/
        /* IPv4 TX                                 */

        cluster L3IPv4 {
            or Tx {
                port true[AndUpperHdr .L2EtherAddHdrTypeIPv4]
                port false[] }

            and AndUpperHdr {
                port true[AddHeader]
                port false[] }

            node AddHeader {
                port true[AddHdrVersion AddHdrIHL AddHdrTotLen AddHdrTTL
                          AddHdrSAddr AddHdrDAddr AddHdrProto .L3HdrAdded] }


            node AddHdrProto {
                port true[AddHdrProtoUDP] }

            and AddHdrProtoUDP {
                port true[AddHdrProtoUDP_]
                port false[] }
            node AddHdrProtoUDP_ {
                port true[AddHdrProtoDone] }

            or AddHdrProtoDone {
                port true[Done]
                port false[] }


            node AddHdrVersion {
                port true[Done] }

            node AddHdrIHL {
                port true[Done] }

            node AddHdrTotLen {
                port true[Done] }

            node AddHdrTTL {
                port true[Done] }

            node AddHdrSAddr {
                port true[Done] }

            node AddHdrDAddr {
                port true[Done] }

            and Done {
                port true[.L3Done]
                port false[] }
        }


        /*******************************************/
        /* IPv6 TX                                 */

        cluster L3IPv6 {
            or Tx {
                port true[AndUpperHdr .L2EtherAddHdrTypeIPv6]
                port false[] }

            and AndUpperHdr {
                port true[AddHeader]
                port false[] }

            node AddHeader {
                port true[AddHdrVersion AddHdrSAddr AddHdrDAddr .L3HdrAdded] }

            node AddHdrVersion {
                port true[Done] }

            node AddHdrSAddr {
                port true[Done] }

            node AddHdrDAddr {
                port true[Done] }

            and Done {
                port true[.L3Done]
                port false[] }
        }

        /*******************************************/
        /* ARP TX                                  */

        or L3ARPTx {
            port true[L2EtherAddHdrTypeARP]
            port false[] }


        /*******************************************/
        /* Ethernet TX                             */

        cluster L2Ether {
            or Tx {
                port true[AndUpperHdr]
                port false[] }

            and AndUpperHdr {
                port true[AddHeader]
                port false[] }

            node AddHeader {
                port true[AddHdrSAddr AddHdrDAddr AddHdrType] }


            node AddHdrType {
                port true[AddHdrTypeIPv4 AddHdrTypeIPv6 AddHdrTypeARP] }

            and AddHdrTypeIPv4 {
                port true[AddHdrTypeIPv4_]
                port false[] }
            node AddHdrTypeIPv4_ {
                port true[AddHdrProtoDone] }

            and AddHdrTypeIPv6 {
                port true[AddHdrTypeIPv6_]
                port false[] }
            node AddHdrTypeIPv6_ {
                port true[AddHdrProtoDone] }

            and AddHdrTypeARP {
                port true[AddHdrTypeARP_]
                port false[] }
            node AddHdrTypeARP_ {
                port true[AddHdrProtoDone] }

            or AddHdrProtoDone {
                port true[Done]
                port false[] }


            node AddHdrSAddr {
                port true[Done] }

            node AddHdrDAddr {
                port true[Done] }

            and Done {
                port true[.L2Done]
                port false[] }
        }

        /*******************************************/
        /* Abstract TX                             */

        or L4HdrAdded {
            port true[L3IPv4AndUpperHdr]
            port false[] }

        or L4Done {
            port true[L3AboveDone]
            port false[] }


        or L3HdrAdded {
            port true[L2EtherAndUpperHdr]
            port false[] }

        or L3Done {
            port true[L3AboveDone]
            port false[] }

        and L3AboveDone {
            port true[L2AboveDone]
            port false[] }


        or L2Done {
            port true[L2AboveDone]
            port false[] }

        and L2AboveDone {
            port true[.SoftwareTX]
            port false[] }
    }
}
