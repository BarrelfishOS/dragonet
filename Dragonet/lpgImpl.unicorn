graph lpg {
//    node SoftwareRX {
    node Queue {
        port out[RxL2EtherClassified]
        port drop[]
        port init[TxL3ARPSendGratuitous]
    }

    node PacketDrop { }

    node NotSupported { }

    /**************************************************************************/
    /* Receive                                                                */

    cluster Rx {

        /*******************************************/
        /* Ethernet RX                             */

        cluster L2Ether {
            boolean Classified {
                port true[ValidLength]
                port false[..PacketDrop] }

            boolean ValidLength {
                port true[ValidUnicast ValidMulticast ValidBroadcast
                          ValidSrc ValidType ValidLocalMAC]
                port false[..PacketDrop] }

            boolean ValidUnicast {
                port true false[ValidDest] }

            boolean ValidMulticast {
                port true false[ValidDest] }

            boolean ValidBroadcast {
                port true false[ValidDest] }

            or ValidDest {
                port true false[Valid] }

            boolean ValidSrc {
                port true false[Valid] }

            boolean ValidLocalMAC {
                port true false[Valid] }

            /* Note that .L3ARPNeedsResponse .L3ARPValidPendingResponse probably
             * belong in here */
            and Valid {
                port true false[.L3IPAndBelowValid] }

            boolean ValidType {
                port true[ClassifyL3]
                port false[..PacketDrop] }

            node ClassifyL3 {
                port ipv4[.L3IPv4ValidHeaderLength]
                port ipv6[..NotSupported]
                port arp[.L3ARPValidHeaderLength]
                port drop[..PacketDrop] }
        }


        /*******************************************/
        /* ARP RX                                  */

        cluster L3ARP {
            boolean ValidHeaderLength {
                port true[Classify LocalIPDest]
                port false[..PacketDrop] }

            node Classify {
                port request[ValidRequest]
                port response[ValidResponse]
                port drop[..PacketDrop] }

            boolean LocalIPDest {
                port true false[NeedsResponse ValidPendingResponse] }

            boolean ValidRequest {
                port true false[NeedsResponse] }

            and NeedsResponse {
                port true[..TxL3ARPInitiateResponse]
                port false[..PacketDrop] }

            boolean ValidResponse {
                port true false[ValidPendingResponse IsPending] }

            boolean IsPending {
                port true false[ValidPendingResponse] }

            and ValidPendingResponse {
                port true[..TxL3ARPProcessPendingResponse]
                port false[..PacketDrop] }

        }


        /*******************************************/
        /* IPv4 RX                                 */

        cluster L3IPv4 {
            boolean ValidHeaderLength {
                port true[ValidReassembly ValidVersion ValidLength
                          ValidTTL ValidChecksum Classify ValidLocalIP]
                port false[..PacketDrop] }

            boolean ValidReassembly {
                port true false[Valid] }

            boolean ValidVersion {
                port true false[Valid] }

            boolean ValidLength {
                port true false[Valid] }

            boolean ValidTTL {
                port true false[Valid] }

            boolean ValidChecksum {
                port true false[Valid] }

            boolean ValidLocalIP {
                port true false[Valid] }

            node Classify {
                port tcp[.L4TCPValidHeaderLength]
                port udp[.L4UDPValidHeaderLength]
                port icmp[.L3ICMPValidHeaderLength]
                port drop[..PacketDrop] }

            and Valid {
                port true false[.L3IPValid] }

        }


        /*******************************************/
        /* IPv6 RX                                 */

        /*boolean L3IPv6ValidHeaderLength {
            port true false[L3IPValid] }*/



        or L3IPValid {
            port true false[L3IPAndBelowValid] }

        and L3IPAndBelowValid {
            port true false[L3ICMPValid L4TCPValid L4UDPValid] }


        /*******************************************/
        /* ICMP RX                                 */

        cluster L3ICMP {
            boolean ValidHeaderLength {
                port true[ValidChecksum IsTypeRequest]
                port false[..PacketDrop] }

            boolean ValidChecksum {
                port true false[Valid] }

            and Valid {
                port true false[NeedsResponse] }

            boolean IsTypeRequest {
                port true false[NeedsResponse] }

            and NeedsResponse {
                port true[..TxL3ICMPInitiateResponse]
                port false[..PacketDrop] }
        }

        /*******************************************/
        /* UDP RX                                  */

        cluster L4UDP {
            boolean ValidHeaderLength {
                port true[ValidLength ValidChecksum]
                port false[..PacketDrop] }

            boolean ValidLength {
                port true false[Valid] }

            boolean ValidChecksum {
                port true false[Valid] }

            and Valid {
                port true[PortClassifyDynamic]
                port false[..PacketDrop] }

            /*node PortClassifyStatic {
                port appDNS [.DnsAPP]
                port appEcho [.EchoAPP]
                port closedPort [ClosedPortAction]
            }*/

            node PortClassifyDynamic {
                port closedPort [ClosedPortAction]
                /** Other ports dynamically added */
            }

            node ClosedPortAction {
                port out[..PacketDrop]
            }

        }


        /*******************************************/
        /* TCP RX                                  */

        cluster L4TCP {
            boolean ValidHeaderLength {
                port true false[Valid] }

            and Valid {
                port true[PortClassifyType]
                port false[..PacketDrop] }

            node PortClassifyType {
                port static[PortClassifyStatic]
                port dynamic[PortClassifyDynamic]
            }

            node PortClassifyStatic {
//                port appEchoTCP [.EchoAppTCP]
                port toSocket [SocketClassify]
                port noSocket [ClosedPortAction]
            }

            node PortClassifyDynamic {
            }

            node ClosedPortAction {
                port out[..PacketDrop]
            }

            cluster Socket {

            node Classify{
                port srvSocket[ServerSide]
                port cliSocket[ClientSide]
//                port closedSocket[...PacketDrop]
            }

            node ServerSide {
                // Selects the next edge based on the current state
                // of socket and without consulting the packet

                port isListen       [IsValidSyn]
                port isSynRecv      [IsValidSynAckS] // for simultaneous open
                port isEstablished  [IsDataPacket IsFinSet] // [IsDataPacket IsValidAck IsFin]
                port isCloseWait    [IsValidFinAck] // FIXME: This transition is pretty much invalid,
                                            // and should not happen
                port isLastAck      [IsValidFinAck2]
                port isClosed       [InClosed] //

            }

            node InClosed {
            // To handle err condition of packets coming in closed state socket
                port out[...PacketDrop]
            }

            node ClientSide {
                port out []
            }

            boolean IsValidSyn{
                port true[AddHalfOpenConn]
                port false[...PacketDrop]
            }

            node AddHalfOpenConn{
                port success[SendSyn]
                port failure[] // [SendRst]
            }

           boolean SendSyn{
                port true[TCPOutMerge]
                port false[]
           }

           boolean IsValidSynAckS {
                port true[SChangeEstablished]
                port false[...PacketDrop]
           }


           boolean IsValidFinAck {
                port true[SChangeToClosed]
                port false[]
           }

           boolean IsValidFinAck2 {
                port true[SChangeToClosed2]
                port false[]
           }

           boolean SChangeEstablished{
                //port true[TCPOutMerge]
                port true[]
                port false[]
           }

           boolean IsDataPacket { // FIXME: complete the Implementation
                port true[CopyData] // [.TxSendAck ]
                port false[]
           }

           boolean IsFinSet{ // FIXME: Implement
                // Copy the data into application buffer
                port true[SChangeLastAck] // [..NotifyApp]
                port false[]
           }

/*           boolean SChangeCloseWait {
                port true[TCPOutMerge]
                port false[]
           }
*/

           boolean SChangeLastAck{
                port true[TCPOutMerge]
                port false[]
           }


           boolean SChangeToClosed{
                port true[TCPOutMerge]
                port false[]
           }

           boolean SChangeToClosed2{
                port true[]
                port false[]
           }


           boolean CopyData{
                // Copy the data into application buffer
                port true[TCPOutMerge] // [..NotifyApp]
                port false[]
           }

            or TCPOutMerge {
                port true[...TxL4TCPInitiateResponse]
                port false[] }

           } // end cluster: Socket


        } // end cluster: L4TCP
    } // end cluster: Rx


    cluster Tx {
        cluster L4UDP {
            node InitiateResponse {
                port out[AllocateHeader]
		port drop[] }

            node AllocateHeader {
                port out[FillHeader] }

            boolean FillHeader {
                port true false[.L3IPv4Prepare] }
        }

        cluster L4TCP {
            node InitiateResponse {
                port out[AllocateHeader]
		port drop[] }

            node AllocateHeader {
                port out[FillHeader] }

            boolean FillHeader {
                port true false[.L3IPv4Prepare] }
        }

        cluster L3ICMP {
            node InitiateResponse {
                port out[AllocateHeader]
		port drop[] }

            node AllocateHeader {
                port out[FillHeader] }

            boolean FillHeader {
                port true false[.L3IPv4Prepare] }
        }

	cluster L3IPv4 {
            or Prepare {
                port true[AllocateHeader]
                port false[] }

            node AllocateHeader {
                port out[FillHeader] }

            node FillHeader {
                port out[Routing] }

            boolean Routing {
                port true false[.L3ARPLookup] }
        }

        cluster L3ARP {
            node SendGratuitous {
                attr "noreplicateininout"
                port false true[Prepare] }

            node ProcessPendingResponse {
                port false []
                port true [LookupRequestIn] }

            node InitiateResponse {
                port false true[Prepare]
		port drop[] }

            or Prepare {
                port true[AllocateHeader]
                port false[] }

            node AllocateHeader {
                port out[FillHeader] }

            boolean FillHeader {
                port true false[.L2EtherPrepare] }

            boolean LookupRequestIn {
                port true false[Lookup]
            }

            or Lookup {
                port true[Lookup_]
                port false[] }

            node Lookup_ {
                port false true[.L2EtherPrepare]
                port miss[SendRequest] }

            node SendRequest {
                attr "noreplicateout"
                port false true[Prepare]
                port drop[] }
        }

        cluster L2Ether {
            or Prepare {
                port true[AllocateHeader]
                port false[] }

            node AllocateHeader {
                port out[FillHeader] }

            node FillHeader {
                port out[.Queue] }
        }

        node Queue { }
    }
}
