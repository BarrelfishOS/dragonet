#ifndef __e10k_q_DEV_H
#define __e10k_q_DEV_H 1
/*
 * DEVICE DEFINITION: Intel 82599 10 GbE Controller Queues
 * 
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY MACKEREL: DO NOT EDIT!
 */
#include <mackerel/mackerel.h>
#include <inttypes.h>
#undef __DN
#define __DN(x) e10k_q ## _ ## x
/*
 * Constants defn: e10k_q.l4_type (L4 Packet type)
 *  - no width specified
 */
typedef uint8_t e10k_q_l4_type_t;
#define e10k_q_udp ((e10k_q_l4_type_t)0x0)
#define e10k_q_tcp ((e10k_q_l4_type_t)0x1)
#define e10k_q_sctp ((e10k_q_l4_type_t)0x2)

static inline char *e10k_q_l4_type_describe(e10k_q_l4_type_t _e) __attribute__ ((always_inline));
static inline char *e10k_q_l4_type_describe(e10k_q_l4_type_t _e)
{
    switch (_e) {
    case e10k_q_udp:
        return("udp: UDP");
    case e10k_q_tcp:
        return("tcp: TCP");
    case e10k_q_sctp:
        return("sctp: SCTP");
    default:
        return(NULL);
    }
}

static inline int e10k_q_l4_type_prtval(char *_s, size_t _size, e10k_q_l4_type_t _e) __attribute__ ((always_inline));
static inline int e10k_q_l4_type_prtval(char *_s, size_t _size, e10k_q_l4_type_t _e)
{
    char *d = e10k_q_l4_type_describe(_e);
    if (d) {
        return(snprintf(_s, _size, "%s", d));
    } else {
        return(snprintf(_s, _size, "Unknown constant %s value 0x%" PRIx64, "e10k_q_l4_type_t", (uint64_t )(_e)));
    }
}

/*
 * Constants defn: e10k_q.tdesc_dtyp (TX Descriptor Type)
 *  - no width specified
 */
typedef uint8_t e10k_q_tdesc_dtyp_t;
#define e10k_q_adv_ctx ((e10k_q_tdesc_dtyp_t)0x2)
#define e10k_q_adv_data ((e10k_q_tdesc_dtyp_t)0x3)

static inline char *e10k_q_tdesc_dtyp_describe(e10k_q_tdesc_dtyp_t _e) __attribute__ ((always_inline));
static inline char *e10k_q_tdesc_dtyp_describe(e10k_q_tdesc_dtyp_t _e)
{
    switch (_e) {
    case e10k_q_adv_ctx:
        return("adv_ctx: Advanced context descriptor");
    case e10k_q_adv_data:
        return("adv_data: Advanced data descriptor");
    default:
        return(NULL);
    }
}

static inline int e10k_q_tdesc_dtyp_prtval(char *_s, size_t _size, e10k_q_tdesc_dtyp_t _e) __attribute__ ((always_inline));
static inline int e10k_q_tdesc_dtyp_prtval(char *_s, size_t _size, e10k_q_tdesc_dtyp_t _e)
{
    char *d = e10k_q_tdesc_dtyp_describe(_e);
    if (d) {
        return(snprintf(_s, _size, "%s", d));
    } else {
        return(snprintf(_s, _size, "Unknown constant %s value 0x%" PRIx64, "e10k_q_tdesc_dtyp_t", (uint64_t )(_e)));
    }
}

/*
 * Data type: e10k_q_rdesc_legacy_t
 * Description: Legacy Receive Descriptor
 * Fields:
 *   buffer	(size 64, offset 0, init 0):	RW	Buffer Address
 *   length	(size 16, offset 64, init 0):	RW	Length Field
 *   checksum	(size 16, offset 80, init 0):	RW	Fragment Checksum
 *   dd	(size 1, offset 96, init 0):	RW	Descriptor Done
 *   eop	(size 1, offset 97, init 0):	RW	End of Packet
 *   _anon98	(size 1, offset 98, init 0):	RSVD	_
 *   vp	(size 1, offset 99, init 0):	RW	VLAN Packet
 *   udpcs	(size 1, offset 100, init 0):	RW	UDP Checksum
 *   l4cs	(size 1, offset 101, init 0):	RW	L4 Checksum
 *   ipcs	(size 1, offset 102, init 0):	RW	Ipv4 Checksum
 *   pif	(size 1, offset 103, init 0):	RW	Non Unicast Address
 *   rxe	(size 1, offset 104, init 0):	RW	MAC error
 *   _anon105	(size 5, offset 105, init 0):	RSVD	_
 *   tcpe	(size 1, offset 110, init 0):	RW	TCP/UDP Checksum Error
 *   ipe	(size 1, offset 111, init 0):	RW	Ipv4 Checksum Error
 *   vlan_tag	(size 16, offset 112, init 0):	RW	VLAN Tag
 */
typedef uint8_t *e10k_q_rdesc_legacy_t;
typedef uint8_t e10k_q_rdesc_legacy_array_t[16];
static const size_t e10k_q_rdesc_legacy_size = sizeof(e10k_q_rdesc_legacy_array_t );
static inline uint64_t e10k_q_rdesc_legacy_buffer_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_rdesc_legacy_buffer_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint64_t *)(0 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_buffer_insert(e10k_q_rdesc_legacy_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_buffer_insert(e10k_q_rdesc_legacy_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(0 + _dtptr)) = (((*((uint64_t *)(0 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_rdesc_legacy_length_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_legacy_length_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(8 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_length_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_length_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(8 + _dtptr)) = (((*((uint16_t *)(8 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_rdesc_legacy_checksum_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_legacy_checksum_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(10 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_checksum_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_checksum_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(10 + _dtptr)) = (((*((uint16_t *)(10 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_legacy_dd_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_dd_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_legacy_dd_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_dd_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_legacy_eop_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_eop_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_legacy_eop_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_eop_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_legacy_vp_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_vp_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_rdesc_legacy_vp_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_vp_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_rdesc_legacy_udpcs_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_udpcs_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_rdesc_legacy_udpcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_udpcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_rdesc_legacy_l4cs_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_l4cs_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_rdesc_legacy_l4cs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_l4cs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_legacy_ipcs_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_ipcs_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_legacy_ipcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_ipcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_legacy_pif_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_pif_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_legacy_pif_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_pif_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_rdesc_legacy_rxe_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_rxe_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_legacy_rxe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_rxe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_legacy_tcpe_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_tcpe_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_legacy_tcpe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_tcpe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_legacy_ipe_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_ipe_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_legacy_ipe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_ipe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint16_t e10k_q_rdesc_legacy_vlan_tag_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_legacy_vlan_tag_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(14 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_vlan_tag_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_vlan_tag_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(14 + _dtptr)) = (((*((uint16_t *)(14 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_rdesc_legacy_prtval(char *_s, size_t _size, e10k_q_rdesc_legacy_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_rdesc_legacy_prtval(char *_s, size_t _size, e10k_q_rdesc_legacy_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " buffer =\t%" PRIx64 "\t(Buffer Address)\n", e10k_q_rdesc_legacy_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " length =\t%" PRIx16 "\t(Length Field)\n", e10k_q_rdesc_legacy_length_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " checksum =\t%" PRIx16 "\t(Fragment Checksum)\n", e10k_q_rdesc_legacy_checksum_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t(Descriptor Done)\n", e10k_q_rdesc_legacy_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_rdesc_legacy_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vp =\t%" PRIx8 "\t(VLAN Packet)\n", e10k_q_rdesc_legacy_vp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " udpcs =\t%" PRIx8 "\t(UDP Checksum)\n", e10k_q_rdesc_legacy_udpcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " l4cs =\t%" PRIx8 "\t(L4 Checksum)\n", e10k_q_rdesc_legacy_l4cs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipcs =\t%" PRIx8 "\t(Ipv4 Checksum)\n", e10k_q_rdesc_legacy_ipcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pif =\t%" PRIx8 "\t(Non Unicast Address)\n", e10k_q_rdesc_legacy_pif_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rxe =\t%" PRIx8 "\t(MAC error)\n", e10k_q_rdesc_legacy_rxe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " tcpe =\t%" PRIx8 "\t(TCP/UDP Checksum Error)\n", e10k_q_rdesc_legacy_tcpe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipe =\t%" PRIx8 "\t(Ipv4 Checksum Error)\n", e10k_q_rdesc_legacy_ipe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vlan_tag =\t%" PRIx16 "\t(VLAN Tag)\n", e10k_q_rdesc_legacy_vlan_tag_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_rdesc_adv_rd_t
 * Description: Advanced Receive Descriptor (read)
 * Fields:
 *   buffer	(size 64, offset 0, init 0):	RW	Packet Buffer Address
 *   hdr_buffer	(size 64, offset 64, init 0):	RW	Header Buffer Address
 */
typedef uint8_t *e10k_q_rdesc_adv_rd_t;
typedef uint8_t e10k_q_rdesc_adv_rd_array_t[16];
static const size_t e10k_q_rdesc_adv_rd_size = sizeof(e10k_q_rdesc_adv_rd_array_t );
static inline uint64_t e10k_q_rdesc_adv_rd_buffer_extract(e10k_q_rdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_rdesc_adv_rd_buffer_extract(e10k_q_rdesc_adv_rd_t _dtptr)
{
    return(((*((uint64_t *)(0 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_rdesc_adv_rd_buffer_insert(e10k_q_rdesc_adv_rd_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_rd_buffer_insert(e10k_q_rdesc_adv_rd_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(0 + _dtptr)) = (((*((uint64_t *)(0 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline uint64_t e10k_q_rdesc_adv_rd_hdr_buffer_extract(e10k_q_rdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_rdesc_adv_rd_hdr_buffer_extract(e10k_q_rdesc_adv_rd_t _dtptr)
{
    return(((*((uint64_t *)(8 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_rdesc_adv_rd_hdr_buffer_insert(e10k_q_rdesc_adv_rd_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_rd_hdr_buffer_insert(e10k_q_rdesc_adv_rd_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(8 + _dtptr)) = (((*((uint64_t *)(8 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline int e10k_q_rdesc_adv_rd_prtval(char *_s, size_t _size, e10k_q_rdesc_adv_rd_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_rdesc_adv_rd_prtval(char *_s, size_t _size, e10k_q_rdesc_adv_rd_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " buffer =\t%" PRIx64 "\t(Packet Buffer Address)\n", e10k_q_rdesc_adv_rd_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " hdr_buffer =\t%" PRIx64 "\t(Header Buffer Address)\n", e10k_q_rdesc_adv_rd_hdr_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_rdesc_adv_wb_t
 * Description: Advanced Receive Descriptor (write-back)
 * Fields:
 *   rss_type	(size 4, offset 0, init 0):	RW	RSS type
 *   pt_ipv4	(size 1, offset 4, init 0):	RW	IPv4 header present
 *   pt_ipv4e	(size 1, offset 5, init 0):	RW	IPv4 with extensions
 *   pt_ipv6	(size 1, offset 6, init 0):	RW	IPv6 header present
 *   pt_ipv6e	(size 1, offset 7, init 0):	RW	IPv6 with extensions
 *   pt_tcp	(size 1, offset 8, init 0):	RW	TCP header present
 *   pt_udp	(size 1, offset 9, init 0):	RW	UDP header present
 *   pt_sctp	(size 1, offset 10, init 0):	RW	SCTP header
 *   pt_nfs	(size 1, offset 11, init 0):	RW	NFS header
 *   pt_isesp	(size 1, offset 12, init 0):	RW	IPSec ESP - IPSec encapsulation
 *   pt_isah	(size 1, offset 13, init 0):	RW	IPSec AH - IPSec encapsulation
 *   pt_linksec	(size 1, offset 14, init 0):	RW	LinkSec encapsulation
 *   pt_l2packet	(size 1, offset 15, init 0):	RW	L2 packet
 *   _anon16	(size 1, offset 16, init 0):	RSVD	_
 *   rsccnt	(size 4, offset 17, init 0):	RW	RSC Packet Count
 *   hdr_len	(size 10, offset 21, init 0):	RW	Packet header length
 *   sph	(size 1, offset 31, init 0):	RW	Split Header
 *   param	(size 32, offset 32, init 0):	RW	RSS Hash/Fragement CS/Fdir Flt ID/...
 *   dd	(size 1, offset 64, init 0):	RW	Descriptor Done Status
 *   eop	(size 1, offset 65, init 0):	RW	End of Packet
 *   flm	(size 1, offset 66, init 0):	RW	Flow director filter match
 *   vp	(size 1, offset 67, init 0):	RW	VLAN Packet
 *   udpcs	(size 1, offset 68, init 0):	RW	UDP Checksum
 *   l4i	(size 1, offset 69, init 0):	RW	L4 Integrity
 *   ipcs	(size 1, offset 70, init 0):	RW	IPv4 Checksum
 *   pif	(size 1, offset 71, init 0):	RW	Non Unicast Address
 *   _anon72	(size 1, offset 72, init 0):	RSVD	_
 *   vext	(size 1, offset 73, init 0):	RW	Outer-VLAN found in double VLAN packet
 *   udpv	(size 1, offset 74, init 0):	RW	UDP Checksum Valid
 *   llint	(size 1, offset 75, init 0):	RW	Low Latency Interrupt
 *   _anon76	(size 4, offset 76, init 0):	RSVD	_
 *   ts	(size 1, offset 80, init 0):	RW	Time Stamp
 *   secp	(size 1, offset 81, init 0):	RW	Security Processing bit
 *   lb	(size 1, offset 82, init 0):	RW	Loopback status indication
 *   _anon83	(size 1, offset 83, init 0):	RSVD	_
 *   fdirerr_len	(size 3, offset 84, init 0):	RW	FDIRErr/FCERR
 *   hbo	(size 1, offset 87, init 0):	RW	Header Buffer Overflow
 *   _anon88	(size 3, offset 88, init 0):	RSVD	_
 *   secerr	(size 2, offset 91, init 0):	RW	Security error indication (LinkSec, IPSec)
 *   rxe	(size 1, offset 93, init 0):	RW	MAC error
 *   l4e	(size 1, offset 94, init 0):	RW	L4 integrity error
 *   ipe	(size 1, offset 95, init 0):	RW	IPv4 checksum error
 *   pkt_len	(size 16, offset 96, init 0):	RW	Number of bytes posted to packet buffer
 *   vlan_tag	(size 16, offset 112, init 0):	RW	VLAN Tag
 */
typedef uint8_t *e10k_q_rdesc_adv_wb_t;
typedef uint8_t e10k_q_rdesc_adv_wb_array_t[16];
static const size_t e10k_q_rdesc_adv_wb_size = sizeof(e10k_q_rdesc_adv_wb_array_t );
static inline uint8_t e10k_q_rdesc_adv_wb_rss_type_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_rss_type_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(0 + _dtptr))) & 0xf) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_rss_type_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_rss_type_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(0 + _dtptr)) = (((*((uint8_t *)(0 + _dtptr))) & 0xf0) | (0xf & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv4_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv4_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(0 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_rdesc_adv_wb_pt_ipv4_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_ipv4_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(0 + _dtptr)) = (((*((uint8_t *)(0 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv4e_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv4e_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(0 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_rdesc_adv_wb_pt_ipv4e_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_ipv4e_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(0 + _dtptr)) = (((*((uint8_t *)(0 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv6_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv6_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(0 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_adv_wb_pt_ipv6_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_ipv6_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(0 + _dtptr)) = (((*((uint8_t *)(0 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv6e_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_ipv6e_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(0 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_adv_wb_pt_ipv6e_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_ipv6e_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(0 + _dtptr)) = (((*((uint8_t *)(0 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_tcp_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_tcp_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_pt_tcp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_tcp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_udp_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_udp_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_pt_udp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_udp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_sctp_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_sctp_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_rdesc_adv_wb_pt_sctp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_sctp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_nfs_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_nfs_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_rdesc_adv_wb_pt_nfs_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_nfs_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_isesp_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_isesp_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_rdesc_adv_wb_pt_isesp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_isesp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_isah_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_isah_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_rdesc_adv_wb_pt_isah_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_isah_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_linksec_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_linksec_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_adv_wb_pt_linksec_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_linksec_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pt_l2packet_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pt_l2packet_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_adv_wb_pt_l2packet_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pt_l2packet_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_rsccnt_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_rsccnt_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(2 + _dtptr))) & 0x1e) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_rsccnt_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_rsccnt_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(2 + _dtptr)) = (((*((uint8_t *)(2 + _dtptr))) & 0xe1) | (0x1e & (_fieldval << 1)));
}

static inline uint16_t e10k_q_rdesc_adv_wb_hdr_len_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_adv_wb_hdr_len_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint16_t *)(2 + _dtptr))) & 0x7fe0) >> 5);
}

static inline void e10k_q_rdesc_adv_wb_hdr_len_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_hdr_len_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(2 + _dtptr)) = (((*((uint16_t *)(2 + _dtptr))) & 0x801f) | (0x7fe0 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_sph_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_sph_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(3 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_adv_wb_sph_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_sph_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(3 + _dtptr)) = (((*((uint8_t *)(3 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint32_t e10k_q_rdesc_adv_wb_param_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint32_t e10k_q_rdesc_adv_wb_param_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint32_t *)(4 + _dtptr))) & 0xffffffff) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_param_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint32_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_param_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint32_t _fieldval)
{
    *((uint32_t *)(4 + _dtptr)) = (((*((uint32_t *)(4 + _dtptr))) & 0x0) | (0xffffffff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_dd_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_dd_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_dd_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_dd_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_eop_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_eop_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_eop_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_eop_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_flm_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_flm_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_rdesc_adv_wb_flm_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_flm_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_vp_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_vp_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_rdesc_adv_wb_vp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_vp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_udpcs_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_udpcs_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_rdesc_adv_wb_udpcs_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_udpcs_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_l4i_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_l4i_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_rdesc_adv_wb_l4i_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_l4i_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_ipcs_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_ipcs_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_adv_wb_ipcs_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_ipcs_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_pif_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_pif_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_adv_wb_pif_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pif_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_vext_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_vext_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_vext_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_vext_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_udpv_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_udpv_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_rdesc_adv_wb_udpv_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_udpv_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_llint_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_llint_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_rdesc_adv_wb_llint_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_llint_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_ts_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_ts_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_ts_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_ts_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_secp_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_secp_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_secp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_secp_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_lb_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_lb_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_rdesc_adv_wb_lb_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_lb_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_fdirerr_len_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_fdirerr_len_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x70) >> 4);
}

static inline void e10k_q_rdesc_adv_wb_fdirerr_len_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_fdirerr_len_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0x8f) | (0x70 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_hbo_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_hbo_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_adv_wb_hbo_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_hbo_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_secerr_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_secerr_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x18) >> 3);
}

static inline void e10k_q_rdesc_adv_wb_secerr_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_secerr_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xe7) | (0x18 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_rxe_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_rxe_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_rdesc_adv_wb_rxe_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_rxe_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_l4e_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_l4e_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_adv_wb_l4e_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_l4e_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_ipe_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_ipe_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_adv_wb_ipe_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_ipe_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint16_t e10k_q_rdesc_adv_wb_pkt_len_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_adv_wb_pkt_len_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint16_t *)(12 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_pkt_len_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_pkt_len_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(12 + _dtptr)) = (((*((uint16_t *)(12 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_rdesc_adv_wb_vlan_tag_extract(e10k_q_rdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_adv_wb_vlan_tag_extract(e10k_q_rdesc_adv_wb_t _dtptr)
{
    return(((*((uint16_t *)(14 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_vlan_tag_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_vlan_tag_insert(e10k_q_rdesc_adv_wb_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(14 + _dtptr)) = (((*((uint16_t *)(14 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_rdesc_adv_wb_prtval(char *_s, size_t _size, e10k_q_rdesc_adv_wb_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_rdesc_adv_wb_prtval(char *_s, size_t _size, e10k_q_rdesc_adv_wb_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rss_type =\t%" PRIx8 "\t(RSS type)\n", e10k_q_rdesc_adv_wb_rss_type_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_ipv4 =\t%" PRIx8 "\t(IPv4 header present)\n", e10k_q_rdesc_adv_wb_pt_ipv4_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_ipv4e =\t%" PRIx8 "\t(IPv4 with extensions)\n", e10k_q_rdesc_adv_wb_pt_ipv4e_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_ipv6 =\t%" PRIx8 "\t(IPv6 header present)\n", e10k_q_rdesc_adv_wb_pt_ipv6_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_ipv6e =\t%" PRIx8 "\t(IPv6 with extensions)\n", e10k_q_rdesc_adv_wb_pt_ipv6e_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_tcp =\t%" PRIx8 "\t(TCP header present)\n", e10k_q_rdesc_adv_wb_pt_tcp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_udp =\t%" PRIx8 "\t(UDP header present)\n", e10k_q_rdesc_adv_wb_pt_udp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_sctp =\t%" PRIx8 "\t(SCTP header)\n", e10k_q_rdesc_adv_wb_pt_sctp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_nfs =\t%" PRIx8 "\t(NFS header)\n", e10k_q_rdesc_adv_wb_pt_nfs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_isesp =\t%" PRIx8 "\t(IPSec ESP - IPSec encapsulation)\n", e10k_q_rdesc_adv_wb_pt_isesp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_isah =\t%" PRIx8 "\t(IPSec AH - IPSec encapsulation)\n", e10k_q_rdesc_adv_wb_pt_isah_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_linksec =\t%" PRIx8 "\t(LinkSec encapsulation)\n", e10k_q_rdesc_adv_wb_pt_linksec_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pt_l2packet =\t%" PRIx8 "\t(L2 packet)\n", e10k_q_rdesc_adv_wb_pt_l2packet_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rsccnt =\t%" PRIx8 "\t(RSC Packet Count)\n", e10k_q_rdesc_adv_wb_rsccnt_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " hdr_len =\t%" PRIx16 "\t(Packet header length)\n", e10k_q_rdesc_adv_wb_hdr_len_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " sph =\t%" PRIx8 "\t(Split Header)\n", e10k_q_rdesc_adv_wb_sph_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " param =\t%" PRIx32 "\t(RSS Hash/Fragement CS/Fdir Flt ID/...)\n", e10k_q_rdesc_adv_wb_param_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t(Descriptor Done Status)\n", e10k_q_rdesc_adv_wb_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_rdesc_adv_wb_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " flm =\t%" PRIx8 "\t(Flow director filter match)\n", e10k_q_rdesc_adv_wb_flm_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vp =\t%" PRIx8 "\t(VLAN Packet)\n", e10k_q_rdesc_adv_wb_vp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " udpcs =\t%" PRIx8 "\t(UDP Checksum)\n", e10k_q_rdesc_adv_wb_udpcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " l4i =\t%" PRIx8 "\t(L4 Integrity)\n", e10k_q_rdesc_adv_wb_l4i_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipcs =\t%" PRIx8 "\t(IPv4 Checksum)\n", e10k_q_rdesc_adv_wb_ipcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pif =\t%" PRIx8 "\t(Non Unicast Address)\n", e10k_q_rdesc_adv_wb_pif_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vext =\t%" PRIx8 "\t(Outer-VLAN found in double VLAN packet)\n", e10k_q_rdesc_adv_wb_vext_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " udpv =\t%" PRIx8 "\t(UDP Checksum Valid)\n", e10k_q_rdesc_adv_wb_udpv_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " llint =\t%" PRIx8 "\t(Low Latency Interrupt)\n", e10k_q_rdesc_adv_wb_llint_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ts =\t%" PRIx8 "\t(Time Stamp)\n", e10k_q_rdesc_adv_wb_ts_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " secp =\t%" PRIx8 "\t(Security Processing bit)\n", e10k_q_rdesc_adv_wb_secp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " lb =\t%" PRIx8 "\t(Loopback status indication)\n", e10k_q_rdesc_adv_wb_lb_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " fdirerr_len =\t%" PRIx8 "\t(FDIRErr/FCERR)\n", e10k_q_rdesc_adv_wb_fdirerr_len_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " hbo =\t%" PRIx8 "\t(Header Buffer Overflow)\n", e10k_q_rdesc_adv_wb_hbo_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " secerr =\t%" PRIx8 "\t(Security error indication (LinkSec, IPSec))\n", e10k_q_rdesc_adv_wb_secerr_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rxe =\t%" PRIx8 "\t(MAC error)\n", e10k_q_rdesc_adv_wb_rxe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " l4e =\t%" PRIx8 "\t(L4 integrity error)\n", e10k_q_rdesc_adv_wb_l4e_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipe =\t%" PRIx8 "\t(IPv4 checksum error)\n", e10k_q_rdesc_adv_wb_ipe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pkt_len =\t%" PRIx16 "\t(Number of bytes posted to packet buffer)\n", e10k_q_rdesc_adv_wb_pkt_len_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vlan_tag =\t%" PRIx16 "\t(VLAN Tag)\n", e10k_q_rdesc_adv_wb_vlan_tag_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_rdesc_adv_wb_nl_t
 * Description: Advanced Receive Descriptor (write-back) for non-last
 * Fields:
 *   _anon0	(size 17, offset 0, init 0):	RSVD	_
 *   rsccnt	(size 4, offset 17, init 0):	RW	RSC Packet Count
 *   _anon21	(size 43, offset 21, init 0):	RSVD	_
 *   dd	(size 1, offset 64, init 0):	RW	Descriptor Done Status
 *   eop	(size 1, offset 65, init 0):	RW	End of Packet
 *   _anon66	(size 2, offset 66, init 0):	RSVD	_
 *   nextp	(size 16, offset 68, init 0):	RW	Next Descriptor Pointer
 *   _anon84	(size 12, offset 84, init 0):	RSVD	_
 *   pkt_len	(size 16, offset 96, init 0):	RW	Number of bytes posted to packet buffer
 *   _anon112	(size 16, offset 112, init 0):	RSVD	_
 */
typedef uint8_t *e10k_q_rdesc_adv_wb_nl_t;
typedef uint8_t e10k_q_rdesc_adv_wb_nl_array_t[16];
static const size_t e10k_q_rdesc_adv_wb_nl_size = sizeof(e10k_q_rdesc_adv_wb_nl_array_t );
static inline uint8_t e10k_q_rdesc_adv_wb_nl_rsccnt_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_nl_rsccnt_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr)
{
    return(((*((uint8_t *)(2 + _dtptr))) & 0x1e) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_nl_rsccnt_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_nl_rsccnt_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(2 + _dtptr)) = (((*((uint8_t *)(2 + _dtptr))) & 0xe1) | (0x1e & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_nl_dd_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_nl_dd_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_nl_dd_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_nl_dd_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_adv_wb_nl_eop_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_adv_wb_nl_eop_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr)
{
    return(((*((uint8_t *)(8 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_adv_wb_nl_eop_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_nl_eop_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(8 + _dtptr)) = (((*((uint8_t *)(8 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint16_t e10k_q_rdesc_adv_wb_nl_nextp_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_adv_wb_nl_nextp_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr)
{
    return(((*((uint32_t *)(8 + _dtptr))) & 0xffff0) >> 4);
}

static inline void e10k_q_rdesc_adv_wb_nl_nextp_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_nl_nextp_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint16_t _fieldval)
{
    *((uint32_t *)(8 + _dtptr)) = (((*((uint32_t *)(8 + _dtptr))) & 0xfff0000f) | (0xffff0 & (_fieldval << 4)));
}

static inline uint16_t e10k_q_rdesc_adv_wb_nl_pkt_len_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_adv_wb_nl_pkt_len_extract(e10k_q_rdesc_adv_wb_nl_t _dtptr)
{
    return(((*((uint16_t *)(12 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_adv_wb_nl_pkt_len_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_adv_wb_nl_pkt_len_insert(e10k_q_rdesc_adv_wb_nl_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(12 + _dtptr)) = (((*((uint16_t *)(12 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_rdesc_adv_wb_nl_prtval(char *_s, size_t _size, e10k_q_rdesc_adv_wb_nl_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_rdesc_adv_wb_nl_prtval(char *_s, size_t _size, e10k_q_rdesc_adv_wb_nl_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rsccnt =\t%" PRIx8 "\t(RSC Packet Count)\n", e10k_q_rdesc_adv_wb_nl_rsccnt_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t(Descriptor Done Status)\n", e10k_q_rdesc_adv_wb_nl_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_rdesc_adv_wb_nl_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " nextp =\t%" PRIx16 "\t(Next Descriptor Pointer)\n", e10k_q_rdesc_adv_wb_nl_nextp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pkt_len =\t%" PRIx16 "\t(Number of bytes posted to packet buffer)\n", e10k_q_rdesc_adv_wb_nl_pkt_len_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_tdesc_legacy_t
 * Description: Legacy Transmit Descriptor Format
 * Fields:
 *   buffer	(size 64, offset 0, init 0):	RW	Buffer Address
 *   length	(size 16, offset 64, init 0):	RW	Length
 *   cso	(size 8, offset 80, init 0):	RW	Checksum Offset
 *   eop	(size 1, offset 88, init 0):	RW	End of Packet
 *   ifcs	(size 1, offset 89, init 0):	RW	Insert FCS
 *   ic	(size 1, offset 90, init 0):	RW	Insert Checksum
 *   rs	(size 1, offset 91, init 0):	RW	Report Status
 *   _anon92	(size 1, offset 92, init 0):	RSVD	_
 *   dext	(size 1, offset 93, init 0):	RW	Descriptor extension
 *   vle	(size 1, offset 94, init 0):	RW	VLAN Packet Enable
 *   _anon95	(size 1, offset 95, init 0):	RSVD	_
 *   dd	(size 1, offset 96, init 0):	RW	 Descriptor Done Status
 *   _anon97	(size 3, offset 97, init 0):	RSVD	_
 *   _anon100	(size 4, offset 100, init 0):	RSVD	_
 *   css	(size 8, offset 104, init 0):	RW	Checksum Start
 *   vlan	(size 16, offset 112, init 0):	RW	VLAN Field
 */
typedef uint8_t *e10k_q_tdesc_legacy_t;
typedef uint8_t e10k_q_tdesc_legacy_array_t[16];
static const size_t e10k_q_tdesc_legacy_size = sizeof(e10k_q_tdesc_legacy_array_t );
static inline uint64_t e10k_q_tdesc_legacy_buffer_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_tdesc_legacy_buffer_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint64_t *)(0 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_tdesc_legacy_buffer_insert(e10k_q_tdesc_legacy_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_buffer_insert(e10k_q_tdesc_legacy_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(0 + _dtptr)) = (((*((uint64_t *)(0 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_legacy_length_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_legacy_length_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(8 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_legacy_length_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_length_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(8 + _dtptr)) = (((*((uint16_t *)(8 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_cso_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_cso_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0xff) >> 0);
}

static inline void e10k_q_tdesc_legacy_cso_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_cso_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0x0) | (0xff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_eop_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_eop_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_legacy_eop_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_eop_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_ifcs_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_ifcs_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_tdesc_legacy_ifcs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_ifcs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_tdesc_legacy_ic_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_ic_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_tdesc_legacy_ic_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_ic_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_tdesc_legacy_rs_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_rs_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_tdesc_legacy_rs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_rs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_tdesc_legacy_dext_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_dext_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_tdesc_legacy_dext_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_dext_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_tdesc_legacy_vle_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_vle_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_tdesc_legacy_vle_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_vle_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_tdesc_legacy_dd_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_dd_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_legacy_dd_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_dd_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_css_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_css_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0xff) >> 0);
}

static inline void e10k_q_tdesc_legacy_css_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_css_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0x0) | (0xff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_legacy_vlan_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_legacy_vlan_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(14 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_legacy_vlan_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_vlan_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(14 + _dtptr)) = (((*((uint16_t *)(14 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_tdesc_legacy_prtval(char *_s, size_t _size, e10k_q_tdesc_legacy_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_tdesc_legacy_prtval(char *_s, size_t _size, e10k_q_tdesc_legacy_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " buffer =\t%" PRIx64 "\t(Buffer Address)\n", e10k_q_tdesc_legacy_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " length =\t%" PRIx16 "\t(Length)\n", e10k_q_tdesc_legacy_length_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " cso =\t%" PRIx8 "\t(Checksum Offset)\n", e10k_q_tdesc_legacy_cso_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_tdesc_legacy_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ifcs =\t%" PRIx8 "\t(Insert FCS)\n", e10k_q_tdesc_legacy_ifcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ic =\t%" PRIx8 "\t(Insert Checksum)\n", e10k_q_tdesc_legacy_ic_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rs =\t%" PRIx8 "\t(Report Status)\n", e10k_q_tdesc_legacy_rs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dext =\t%" PRIx8 "\t(Descriptor extension)\n", e10k_q_tdesc_legacy_dext_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vle =\t%" PRIx8 "\t(VLAN Packet Enable)\n", e10k_q_tdesc_legacy_vle_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t( Descriptor Done Status)\n", e10k_q_tdesc_legacy_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " css =\t%" PRIx8 "\t(Checksum Start)\n", e10k_q_tdesc_legacy_css_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vlan =\t%" PRIx16 "\t(VLAN Field)\n", e10k_q_tdesc_legacy_vlan_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_tdesc_adv_ctx_t
 * Description: Advanced Transmit Context Descriptor (write-back)
 * Fields:
 *   iplen	(size 9, offset 0, init 0):	RW	IP header length
 *   maclen	(size 7, offset 9, init 0):	RW	MAC header length
 *   vlan	(size 16, offset 16, init 0):	RW	VLAN tag to be inserted
 *   ipsec_saidx	(size 10, offset 32, init 0):	RW	Ipsec SA IDX
 *   fcoef	(size 6, offset 42, init 0):	RW	FCoEF
 *   _anon48	(size 16, offset 48, init 0):	RSVD	_
 *   ips_esp_len	(size 9, offset 64, init 0):	RW	Size of ESP trailer and ESP ICV (ipsec)
 *   snap	(size 1, offset 73, init 0):	RW	SNAP indication
 *   ipv4	(size 1, offset 74, init 0):	RW	IPv4 Packet type (1=ipv4, 0=ipv6)
 *   l4t	(size 2, offset 75, init 0):	RW	L4 Packet type
 *   ipsec_type	(size 1, offset 77, init 0):	RW	IPSEC_TYPE
 *   encryption	(size 1, offset 78, init 0):	RW	ESP encryption offload
 *   fcoe	(size 1, offset 79, init 0):	RW	FCoE
 *   _anon80	(size 4, offset 80, init 0):	RSVD	_
 *   dtyp	(size 4, offset 84, init 0):	RW	Descriptor type: adv_ctx
 *   _anon88	(size 5, offset 88, init 0):	RSVD	_
 *   dext	(size 1, offset 93, init 0):	RW	Descriptor Extension (must be 1)
 *   bcntlen	(size 6, offset 94, init 0):	RW	Must be 0x3F for rate limited queues
 *   idx	(size 1, offset 100, init 0):	RW	Index into the hardware context table
 *   _anon101	(size 3, offset 101, init 0):	RSVD	_
 *   l4len	(size 8, offset 104, init 0):	RW	L4 header length
 *   mss	(size 16, offset 112, init 0):	RW	Maximum Segment Size
 */
typedef uint8_t *e10k_q_tdesc_adv_ctx_t;
typedef uint8_t e10k_q_tdesc_adv_ctx_array_t[16];
static const size_t e10k_q_tdesc_adv_ctx_size = sizeof(e10k_q_tdesc_adv_ctx_array_t );
static inline uint16_t e10k_q_tdesc_adv_ctx_iplen_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_adv_ctx_iplen_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint16_t *)(0 + _dtptr))) & 0x1ff) >> 0);
}

static inline void e10k_q_tdesc_adv_ctx_iplen_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_iplen_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(0 + _dtptr)) = (((*((uint16_t *)(0 + _dtptr))) & 0xfe00) | (0x1ff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_maclen_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_maclen_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(1 + _dtptr))) & 0xfe) >> 1);
}

static inline void e10k_q_tdesc_adv_ctx_maclen_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_maclen_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(1 + _dtptr)) = (((*((uint8_t *)(1 + _dtptr))) & 0x1) | (0xfe & (_fieldval << 1)));
}

static inline uint16_t e10k_q_tdesc_adv_ctx_vlan_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_adv_ctx_vlan_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint16_t *)(2 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_adv_ctx_vlan_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_vlan_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(2 + _dtptr)) = (((*((uint16_t *)(2 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_adv_ctx_ipsec_saidx_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_adv_ctx_ipsec_saidx_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint16_t *)(4 + _dtptr))) & 0x3ff) >> 0);
}

static inline void e10k_q_tdesc_adv_ctx_ipsec_saidx_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_ipsec_saidx_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(4 + _dtptr)) = (((*((uint16_t *)(4 + _dtptr))) & 0xfc00) | (0x3ff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_fcoef_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_fcoef_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(5 + _dtptr))) & 0xfc) >> 2);
}

static inline void e10k_q_tdesc_adv_ctx_fcoef_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_fcoef_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(5 + _dtptr)) = (((*((uint8_t *)(5 + _dtptr))) & 0x3) | (0xfc & (_fieldval << 2)));
}

static inline uint16_t e10k_q_tdesc_adv_ctx_ips_esp_len_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_adv_ctx_ips_esp_len_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint16_t *)(8 + _dtptr))) & 0x1ff) >> 0);
}

static inline void e10k_q_tdesc_adv_ctx_ips_esp_len_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_ips_esp_len_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(8 + _dtptr)) = (((*((uint16_t *)(8 + _dtptr))) & 0xfe00) | (0x1ff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_snap_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_snap_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_tdesc_adv_ctx_snap_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_snap_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_ipv4_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_ipv4_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_tdesc_adv_ctx_ipv4_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_ipv4_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline e10k_q_l4_type_t e10k_q_tdesc_adv_ctx_l4t_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline e10k_q_l4_type_t e10k_q_tdesc_adv_ctx_l4t_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x18) >> 3);
}

static inline void e10k_q_tdesc_adv_ctx_l4t_insert(e10k_q_tdesc_adv_ctx_t _dtptr, e10k_q_l4_type_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_l4t_insert(e10k_q_tdesc_adv_ctx_t _dtptr, e10k_q_l4_type_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xe7) | (0x18 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_ipsec_type_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_ipsec_type_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_tdesc_adv_ctx_ipsec_type_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_ipsec_type_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_encryption_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_encryption_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_tdesc_adv_ctx_encryption_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_encryption_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_fcoe_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_fcoe_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(9 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_tdesc_adv_ctx_fcoe_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_fcoe_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(9 + _dtptr)) = (((*((uint8_t *)(9 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline e10k_q_tdesc_dtyp_t e10k_q_tdesc_adv_ctx_dtyp_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline e10k_q_tdesc_dtyp_t e10k_q_tdesc_adv_ctx_dtyp_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0xf0) >> 4);
}

static inline void e10k_q_tdesc_adv_ctx_dtyp_insert(e10k_q_tdesc_adv_ctx_t _dtptr, e10k_q_tdesc_dtyp_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_dtyp_insert(e10k_q_tdesc_adv_ctx_t _dtptr, e10k_q_tdesc_dtyp_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xf) | (0xf0 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_dext_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_dext_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_tdesc_adv_ctx_dext_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_dext_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_bcntlen_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_bcntlen_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint64_t *)(8 + _dtptr))) & 0xfc0000000) >> 30);
}

static inline void e10k_q_tdesc_adv_ctx_bcntlen_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_bcntlen_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint64_t *)(8 + _dtptr)) = (((*((uint64_t *)(8 + _dtptr))) & 0xfffffff03fffffff) | (0xfc0000000 & (_fieldval << 30)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_idx_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_idx_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_tdesc_adv_ctx_idx_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_idx_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_tdesc_adv_ctx_l4len_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_ctx_l4len_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0xff) >> 0);
}

static inline void e10k_q_tdesc_adv_ctx_l4len_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_l4len_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0x0) | (0xff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_adv_ctx_mss_extract(e10k_q_tdesc_adv_ctx_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_adv_ctx_mss_extract(e10k_q_tdesc_adv_ctx_t _dtptr)
{
    return(((*((uint16_t *)(14 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_adv_ctx_mss_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_ctx_mss_insert(e10k_q_tdesc_adv_ctx_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(14 + _dtptr)) = (((*((uint16_t *)(14 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_tdesc_adv_ctx_prtval(char *_s, size_t _size, e10k_q_tdesc_adv_ctx_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_tdesc_adv_ctx_prtval(char *_s, size_t _size, e10k_q_tdesc_adv_ctx_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " iplen =\t%" PRIx16 "\t(IP header length)\n", e10k_q_tdesc_adv_ctx_iplen_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " maclen =\t%" PRIx8 "\t(MAC header length)\n", e10k_q_tdesc_adv_ctx_maclen_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vlan =\t%" PRIx16 "\t(VLAN tag to be inserted)\n", e10k_q_tdesc_adv_ctx_vlan_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipsec_saidx =\t%" PRIx16 "\t(Ipsec SA IDX)\n", e10k_q_tdesc_adv_ctx_ipsec_saidx_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " fcoef =\t%" PRIx8 "\t(FCoEF)\n", e10k_q_tdesc_adv_ctx_fcoef_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ips_esp_len =\t%" PRIx16 "\t(Size of ESP trailer and ESP ICV (ipsec))\n", e10k_q_tdesc_adv_ctx_ips_esp_len_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " snap =\t%" PRIx8 "\t(SNAP indication)\n", e10k_q_tdesc_adv_ctx_snap_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipv4 =\t%" PRIx8 "\t(IPv4 Packet type (1=ipv4, 0=ipv6))\n", e10k_q_tdesc_adv_ctx_ipv4_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " l4t =\t");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = e10k_q_l4_type_prtval(_s + _r, _avail, e10k_q_tdesc_adv_ctx_l4t_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "\t(L4 Packet type)\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipsec_type =\t%" PRIx8 "\t(IPSEC_TYPE)\n", e10k_q_tdesc_adv_ctx_ipsec_type_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " encryption =\t%" PRIx8 "\t(ESP encryption offload)\n", e10k_q_tdesc_adv_ctx_encryption_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " fcoe =\t%" PRIx8 "\t(FCoE)\n", e10k_q_tdesc_adv_ctx_fcoe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dtyp =\t");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = e10k_q_tdesc_dtyp_prtval(_s + _r, _avail, e10k_q_tdesc_adv_ctx_dtyp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "\t(Descriptor type: adv_ctx)\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dext =\t%" PRIx8 "\t(Descriptor Extension (must be 1))\n", e10k_q_tdesc_adv_ctx_dext_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " bcntlen =\t%" PRIx8 "\t(Must be 0x3F for rate limited queues)\n", e10k_q_tdesc_adv_ctx_bcntlen_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " idx =\t%" PRIx8 "\t(Index into the hardware context table)\n", e10k_q_tdesc_adv_ctx_idx_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " l4len =\t%" PRIx8 "\t(L4 header length)\n", e10k_q_tdesc_adv_ctx_l4len_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " mss =\t%" PRIx16 "\t(Maximum Segment Size)\n", e10k_q_tdesc_adv_ctx_mss_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_tdesc_adv_rd_t
 * Description: Advanced Transmit Data Descriptor (read)
 * Fields:
 *   buffer	(size 64, offset 0, init 0):	RW	Buffer Address
 *   dtalen	(size 16, offset 64, init 0):	RW	Bytes to be fetched for this descriptor
 *   _anon80	(size 2, offset 80, init 0):	RSVD	_
 *   mac_ilsec	(size 1, offset 82, init 0):	RW	Apply LinkSec on packet
 *   mac_1588	(size 1, offset 83, init 0):	RW	IEEE1588 time stamp packet
 *   dtyp	(size 4, offset 84, init 0):	RW	Descriptor type: adv_data
 *   eop	(size 1, offset 88, init 0):	RW	End of Packet
 *   ifcs	(size 1, offset 89, init 0):	RW	Insert FCS
 *   _anon90	(size 1, offset 90, init 0):	RSVD	_
 *   rs	(size 1, offset 91, init 0):	RW	Report Status
 *   _anon92	(size 1, offset 92, init 0):	RSVD	_
 *   dext	(size 1, offset 93, init 0):	RW	Descriptor Extension (must be 1)
 *   vle	(size 1, offset 94, init 0):	RW	VLAN Packet Enable
 *   tse	(size 1, offset 95, init 0):	RW	Transmit Segmentation Enable
 *   dd	(size 1, offset 96, init 0):	RW	Descriptor Done
 *   _anon97	(size 3, offset 97, init 0):	RSVD	_
 *   idx	(size 1, offset 100, init 0):	RW	Index into the hardware context table
 *   _anon101	(size 2, offset 101, init 0):	RSVD	_
 *   cc	(size 1, offset 103, init 0):	RW	Check Context bit
 *   ixsm	(size 1, offset 104, init 0):	RW	Insert IP Checksum
 *   txsm	(size 1, offset 105, init 0):	RW	Insert TCP/UDP Checksum
 *   ipsec	(size 1, offset 106, init 0):	RW	Ipsec offload request
 *   _anon107	(size 3, offset 107, init 0):	RSVD	_
 *   paylen	(size 18, offset 110, init 0):	RW	Size in bytes of whole packet (only first descriptor)
 */
typedef uint8_t *e10k_q_tdesc_adv_rd_t;
typedef uint8_t e10k_q_tdesc_adv_rd_array_t[16];
static const size_t e10k_q_tdesc_adv_rd_size = sizeof(e10k_q_tdesc_adv_rd_array_t );
static inline uint64_t e10k_q_tdesc_adv_rd_buffer_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_tdesc_adv_rd_buffer_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint64_t *)(0 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_tdesc_adv_rd_buffer_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_buffer_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(0 + _dtptr)) = (((*((uint64_t *)(0 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_adv_rd_dtalen_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_adv_rd_dtalen_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint16_t *)(8 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_adv_rd_dtalen_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_dtalen_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(8 + _dtptr)) = (((*((uint16_t *)(8 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_mac_ilsec_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_mac_ilsec_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_tdesc_adv_rd_mac_ilsec_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_mac_ilsec_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_mac_1588_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_mac_1588_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_tdesc_adv_rd_mac_1588_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_mac_1588_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline e10k_q_tdesc_dtyp_t e10k_q_tdesc_adv_rd_dtyp_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline e10k_q_tdesc_dtyp_t e10k_q_tdesc_adv_rd_dtyp_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0xf0) >> 4);
}

static inline void e10k_q_tdesc_adv_rd_dtyp_insert(e10k_q_tdesc_adv_rd_t _dtptr, e10k_q_tdesc_dtyp_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_dtyp_insert(e10k_q_tdesc_adv_rd_t _dtptr, e10k_q_tdesc_dtyp_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0xf) | (0xf0 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_eop_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_eop_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_adv_rd_eop_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_eop_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_ifcs_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_ifcs_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_tdesc_adv_rd_ifcs_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_ifcs_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_rs_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_rs_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_tdesc_adv_rd_rs_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_rs_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_dext_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_dext_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_tdesc_adv_rd_dext_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_dext_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_vle_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_vle_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_tdesc_adv_rd_vle_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_vle_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_tse_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_tse_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_tdesc_adv_rd_tse_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_tse_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_dd_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_dd_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_adv_rd_dd_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_dd_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_idx_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_idx_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_tdesc_adv_rd_idx_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_idx_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_cc_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_cc_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_tdesc_adv_rd_cc_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_cc_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_ixsm_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_ixsm_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_adv_rd_ixsm_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_ixsm_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_txsm_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_txsm_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_tdesc_adv_rd_txsm_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_txsm_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_tdesc_adv_rd_ipsec_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_rd_ipsec_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_tdesc_adv_rd_ipsec_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_ipsec_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint32_t e10k_q_tdesc_adv_rd_paylen_extract(e10k_q_tdesc_adv_rd_t _dtptr) __attribute__ ((always_inline));
static inline uint32_t e10k_q_tdesc_adv_rd_paylen_extract(e10k_q_tdesc_adv_rd_t _dtptr)
{
    return(((*((uint32_t *)(12 + _dtptr))) & 0xffffc000) >> 14);
}

static inline void e10k_q_tdesc_adv_rd_paylen_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint32_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_rd_paylen_insert(e10k_q_tdesc_adv_rd_t _dtptr, uint32_t _fieldval)
{
    *((uint32_t *)(12 + _dtptr)) = (((*((uint32_t *)(12 + _dtptr))) & 0x3fff) | (0xffffc000 & (_fieldval << 14)));
}

static inline int e10k_q_tdesc_adv_rd_prtval(char *_s, size_t _size, e10k_q_tdesc_adv_rd_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_tdesc_adv_rd_prtval(char *_s, size_t _size, e10k_q_tdesc_adv_rd_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " buffer =\t%" PRIx64 "\t(Buffer Address)\n", e10k_q_tdesc_adv_rd_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dtalen =\t%" PRIx16 "\t(Bytes to be fetched for this descriptor)\n", e10k_q_tdesc_adv_rd_dtalen_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " mac_ilsec =\t%" PRIx8 "\t(Apply LinkSec on packet)\n", e10k_q_tdesc_adv_rd_mac_ilsec_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " mac_1588 =\t%" PRIx8 "\t(IEEE1588 time stamp packet)\n", e10k_q_tdesc_adv_rd_mac_1588_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dtyp =\t");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = e10k_q_tdesc_dtyp_prtval(_s + _r, _avail, e10k_q_tdesc_adv_rd_dtyp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "\t(Descriptor type: adv_data)\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_tdesc_adv_rd_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ifcs =\t%" PRIx8 "\t(Insert FCS)\n", e10k_q_tdesc_adv_rd_ifcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rs =\t%" PRIx8 "\t(Report Status)\n", e10k_q_tdesc_adv_rd_rs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dext =\t%" PRIx8 "\t(Descriptor Extension (must be 1))\n", e10k_q_tdesc_adv_rd_dext_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vle =\t%" PRIx8 "\t(VLAN Packet Enable)\n", e10k_q_tdesc_adv_rd_vle_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " tse =\t%" PRIx8 "\t(Transmit Segmentation Enable)\n", e10k_q_tdesc_adv_rd_tse_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t(Descriptor Done)\n", e10k_q_tdesc_adv_rd_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " idx =\t%" PRIx8 "\t(Index into the hardware context table)\n", e10k_q_tdesc_adv_rd_idx_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " cc =\t%" PRIx8 "\t(Check Context bit)\n", e10k_q_tdesc_adv_rd_cc_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ixsm =\t%" PRIx8 "\t(Insert IP Checksum)\n", e10k_q_tdesc_adv_rd_ixsm_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " txsm =\t%" PRIx8 "\t(Insert TCP/UDP Checksum)\n", e10k_q_tdesc_adv_rd_txsm_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipsec =\t%" PRIx8 "\t(Ipsec offload request)\n", e10k_q_tdesc_adv_rd_ipsec_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " paylen =\t%" PRIx32 "\t(Size in bytes of whole packet (only first descriptor))\n", e10k_q_tdesc_adv_rd_paylen_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_tdesc_adv_wb_t
 * Description: Advanced Transmit Data Descriptor (write-back)
 * Fields:
 *   _anon0	(size 64, offset 0, init 0):	RSVD	_
 *   _anon64	(size 32, offset 64, init 0):	RSVD	_
 *   dd	(size 1, offset 96, init 0):	RW	dd
 *   _anon97	(size 3, offset 97, init 0):	RSVD	_
 *   _anon100	(size 28, offset 100, init 0):	RSVD	_
 */
typedef uint8_t *e10k_q_tdesc_adv_wb_t;
typedef uint8_t e10k_q_tdesc_adv_wb_array_t[16];
static const size_t e10k_q_tdesc_adv_wb_size = sizeof(e10k_q_tdesc_adv_wb_array_t );
static inline uint8_t e10k_q_tdesc_adv_wb_dd_extract(e10k_q_tdesc_adv_wb_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_adv_wb_dd_extract(e10k_q_tdesc_adv_wb_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_adv_wb_dd_insert(e10k_q_tdesc_adv_wb_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_adv_wb_dd_insert(e10k_q_tdesc_adv_wb_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline int e10k_q_tdesc_adv_wb_prtval(char *_s, size_t _size, e10k_q_tdesc_adv_wb_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_tdesc_adv_wb_prtval(char *_s, size_t _size, e10k_q_tdesc_adv_wb_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t(dd)\n", e10k_q_tdesc_adv_wb_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Device representation structure
 */
struct __DN(t) {
};
typedef struct __DN(t) __DN(t);

// No registers in this device

/*
 * Device Initialization function
 */
static inline void e10k_q_initialize(__DN(t) *_dev) __attribute__ ((always_inline));
static inline void e10k_q_initialize(__DN(t) *_dev)
{
}

static inline int e10k_q_pr(char *_s, size_t _size, __DN(t) *_dev) __attribute__ ((always_inline));
static inline int e10k_q_pr(char *_s, size_t _size, __DN(t) *_dev)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "-------------------------\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "Dump of device e10k_q (Intel 82599 10 GbE Controller Queues):\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "End of dump of device e10k_q\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "-------------------------\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

#undef __DN
#endif // __e10k_q_DEV_H
