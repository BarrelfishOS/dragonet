/*
 * Copyright(c) 2012-2015, ETH Zurich. All rights reserved.
 *
 * Released under a dual BSD 3-clause/GPL 2 license. When using or
 * redistributing this file, you may do so under either license.
 *
 * See LICENCE.Dragonet for details.
 */

graph SFPRG {
    cluster Rx {
        node L2EtherClassifyL3_ {
            port other[C5TupleFilter]
            predicate other "true"
        }

/*
        cluster L3IPv4 {

            boolean Classified {
                implementation SFL3IPv4Classified
                attr "software"
                port true false[]
                constraint true "IPv4"
                constraint false "!IPv4" }

            node Checksum_ {
                port out[ValidChecksum .C5TupleFilter] }

            boolean ValidChecksum {
                implementation SFL3IPv4ValidChecksum
                attr "software"
                port true false[] }
        }
*/

        config C5TupleFilter {
            type { (sip:   <UInt 32>,
                    dip:   <UInt 32>,
                    proto: <Enum (TCP,UDP,SCP,OTHER)>,
                    sport: <UInt 16>,
                    dport: <UInt 16>,
                    queue: UInt 2) }
            function config5tuple
            port queues[Q0Valid Q1Valid Q2Valid Q3Valid Q4Valid Q5Valid Q6Valid Q7Valid Q8Valid Q9Valid Q10Valid]
            port default[ToDefaultQueue] }

        node ToDefaultQueue {
            port true [Q0Valid]
            predicate true "true"
            }

        or Q0Valid {
            port true[Queue0]
            port false[] }
        node Queue0 {
            implementation SFRxQueue0
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue0
            port out[]
            port drop[]
            port init[] }

        or Q1Valid {
            port true[Queue1]
            port false[] }
        node Queue1 {
            implementation SFRxQueue1
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue1
            port out[]
            port drop[]
            port init[] }

        or Q2Valid {
            port true[Queue2]
            port false[] }
        node Queue2 {
            implementation SFRxQueue2
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue2
            port out[]
            port drop[]
            port init[] }

        or Q3Valid {
            port true[Queue3]
            port false[] }

        node Queue3 {
            implementation SFRxQueue3
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue3
            port out[]
            port drop[]
            port init[] }


        or Q4Valid {
            port true[Queue4]
            port false[] }

        node Queue4 {
            implementation SFRxQueue4
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue4
            port out[]
            port drop[]
            port init[] }

        or Q5Valid {
            port true[Queue5]
            port false[] }

        node Queue5 {
            implementation SFRxQueue5
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue5
            port out[]
            port drop[]
            port init[] }

        or Q6Valid {
            port true[Queue6]
            port false[] }

        node Queue6 {
            implementation SFRxQueue6
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue6
            port out[]
            port drop[]
            port init[] }

        or Q7Valid {
            port true[Queue7]
            port false[] }

        node Queue7 {
            implementation SFRxQueue7
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue7
            port out[]
            port drop[]
            port init[] }

        or Q8Valid {
            port true[Queue8]
            port false[] }

        node Queue8 {
            implementation SFRxQueue8
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue8
            port out[]
            port drop[]
            port init[] }

        or Q9Valid {
            port true[Queue9]
            port false[] }

        node Queue9 {
            implementation SFRxQueue9
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue9
            port out[]
            port drop[]
            port init[] }

        or Q10Valid {
            port true[Queue10]
            port false[] }

        node Queue10 {
            implementation SFRxQueue10
            attr "unproductive"
            attr "software"
            attr "init"
            //spawn poll Queue10
            port out[]
            port drop[]
            port init[] }




    }

    cluster Tx {
        node Queue0 {
            implementation SFTxQueue0
            attr "sink"
            attr "software" }
        node Queue1 {
            implementation SFTxQueue1
            attr "sink"
            attr "software" }
        node Queue2 {
            implementation SFTxQueue2
            attr "sink"
            attr "software" }
        node Queue3 {
            implementation SFTxQueue3
            attr "sink"
            attr "software" }
        node Queue4 {
            implementation SFTxQueue4
            attr "sink"
            attr "software" }
        node Queue5 {
            implementation SFTxQueue5
            attr "sink"
            attr "software" }
        node Queue6 {
            implementation SFTxQueue6
            attr "sink"
            attr "software" }
        node Queue7 {
            implementation SFTxQueue7
            attr "sink"
            attr "software" }
        node Queue3 {
            implementation SFTxQueue3
            attr "sink"
            attr "software" }
        node Queue8 {
            implementation SFTxQueue8
            attr "sink"
            attr "software" }
        node Queue9 {
            implementation SFTxQueue9
            attr "sink"
            attr "software" }
        node Queue10 {
            implementation SFTxQueue10
            attr "sink"
            attr "software" }

    }
}


